def identify_vendor(filename):
    """
    Identify vendor from filename.
    Returns the vendor folder name based on keywords in the filename.
    """
    filename = filename.lower()
    
    if "cadwell" in filename:
        return "Cadwell"
    elif "rhythmlink" in filename:
        return "Rhythmlink"
    elif "ives" in filename or "egg" in filename:
        return "Ives_egg"
    elif "neurovision" in filename:
        return "Neurovision"
    elif "medronics" in filename or "medtronic" in filename:
        return "Medronics"
    else:
        return "Other"  # Default folder for unrecognized vendors

# In the Azure Blob Storage upload section (Part 11)
# After creating the confidence folder structure

# Modified blob storage upload code
if 'all_pdf_results' in st.session_state and st.session_state.all_pdf_results and blob_service_client:
    with st.expander("Upload Results to Azure Blob Storage"):
        result_upload_container = st.text_input(
            "Output Container Name",
            value=azure_storage_container_name,
            help="Container where results will be uploaded (will be created if doesn't exist)"
        )
        
        if st.button("Upload Results to Blob Storage"):
            with st.spinner("Uploading results..."):
                all_pdf_results = st.session_state.all_pdf_results
                timestamp = st.session_state.last_processing_timestamp or datetime.now().strftime("%Y%m%d_%H%M%S")
                
                blob_upload_results = []
                
                for pdf_result in all_pdf_results:
                    filename = pdf_result["filename"]
                    base_filename = os.path.splitext(filename)[0]
                    
                    # Identify vendor for folder organization
                    vendor_folder = identify_vendor(filename)
                    
                    # Create the text content with key-value pairs
                    page_results_text = create_page_results_text(pdf_result)
                    
                    # Create timestamp filename
                    timestamp_filename = f"{base_filename}_{timestamp}"
                    
                    # Determine confidence level
                    is_high_confidence = has_high_confidence(pdf_result, threshold=95.0)
                    confidence_folder = "high_confidence" if is_high_confidence else "low_confidence"
                    
                    # Copy source document to SourceDocument folder
                    if input_method == "Upload Files":
                        # For uploaded files, find the original file
                        file_obj = next((f for f in st.session_state.original_files if hasattr(f, 'name') and f.name == filename), None)
                        
                        if file_obj:
                            # Get file position and reset after use
                            pos = file_obj.tell()
                            pdf_content = file_obj.read()
                            file_obj.seek(pos)
                            
                            # Upload to SourceDocument folder
                            source_blob_name = f"SourceDocument/{base_filename}_{timestamp}.pdf"
                            source_success, source_url = upload_to_blob_storage(
                                blob_service_client,
                                result_upload_container,
                                source_blob_name,
                                pdf_content,
                                "application/pdf"
                            )
                        else:
                            source_success, source_url = False, None
                    else:
                        # For blob storage, copy blob to SourceDocument folder
                        try:
                            # Find original blob path
                            original_blob = next((b for b in st.session_state.original_files if b.split('/')[-1] == filename), None)
                            
                            if original_blob:
                                # Download blob content
                                blob_content = download_blob_to_memory(blob_service_client, selected_container, original_blob)
                                
                                if blob_content:
                                    # Upload to SourceDocument folder
                                    source_blob_name = f"SourceDocument/{base_filename}_{timestamp}.pdf"
                                    source_success, source_url = upload_to_blob_storage(
                                        blob_service_client,
                                        result_upload_container,
                                        source_blob_name,
                                        blob_content,
                                        "application/pdf"
                                    )
                                else:
                                    source_success, source_url = False, None
                            else:
                                source_success, source_url = False, None
                        except Exception as e:
                            st.warning(f"Could not copy source document: {str(e)}")
                            source_success, source_url = False, None
                    
                    # Store results in ProcessedResult folder with vendor subfolder
                    processed_folder = f"ProcessedResult/{vendor_folder}/{confidence_folder}"
                    
                    # Upload text file to blob storage
                    text_blob_name = f"{processed_folder}/{timestamp_filename}.txt"
                    text_success, text_url = upload_to_blob_storage(
                        blob_service_client,
                        result_upload_container,
                        text_blob_name,
                        page_results_text,
                        "text/plain"
                    )
                    
                    # Upload JSON to blob storage
                    json_blob_name = f"{processed_folder}/{timestamp_filename}.json"
                    pdf_json = json.dumps(pdf_result, ensure_ascii=False, indent=2)
                    json_success, json_url = upload_to_blob_storage(
                        blob_service_client,
                        result_upload_container,
                        json_blob_name,
                        pdf_json,
                        "application/json"
                    )
                    
                    # Upload CSV to blob storage
                    try:
                        # Create a DataFrame for just this PDF
                        pdf_rows = []
                        for page in pdf_result["pages"]:
                            page_num = page["page"]
                            data = page["data"]
                            
                            # Check for errors
                            if "error" in data:
                                row_data = {"Page": page_num}
                                for field in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                                            "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                                            "Freight", "Salestax", "Total"]:
                                    row_data[field] = "N/A"
                                    row_data[f"{field} Confidence"] = 0
                                pdf_rows.append(row_data)
                                continue
                            
                            # Initialize row data
                            row_data = {"Page": page_num}
                            
                            # Process each field
                            for field in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                                        "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                                        "Freight", "Salestax", "Total"]:
                                field_data = data.get(field, {})
                                
                                if isinstance(field_data, dict):
                                    value = field_data.get("value", "N/A")
                                    confidence = field_data.get("confidence", 0)
                                else:
                                    value = field_data if field_data else "N/A"
                                    confidence = 0
                                
                                # Add to row data
                                row_data[field] = value
                                row_data[f"{field} Confidence"] = round(confidence * 100, 2)
                            
                            # Add completed row to rows
                            pdf_rows.append(row_data)
                        
                        # Create DataFrame and CSV for this PDF
                        if pdf_rows:
                            pdf_df = pd.DataFrame(pdf_rows, dtype=str)
                            pdf_csv = pdf_df.to_csv(index=False)
                            
                            # Upload CSV to blob storage
                            csv_blob_name = f"{processed_folder}/{timestamp_filename}.csv"
                            csv_success, csv_url = upload_to_blob_storage(
                                blob_service_client,
                                result_upload_container,
                                csv_blob_name,
                                pdf_csv,
                                "text/csv"
                            )
                        else:
                            csv_success, csv_url = False, None
                    except Exception as e:
                        st.warning(f"Could not create CSV for {filename}: {e}")
                        csv_success, csv_url = False, None
                    
                    # Store results
                    blob_upload_results.append({
                        "filename": filename,
                        "vendor": vendor_folder,
                        "confidence": "High" if is_high_confidence else "Low",
                        "source_success": source_success,
                        "text_success": text_success,
                        "json_success": json_success,
                        "csv_success": csv_success
                    })
                
                # Display upload results
                st.subheader("Azure Blob Storage Upload Results")
                
                # Create a table to show upload results
                upload_rows = []
                for result in blob_upload_results:
                    upload_rows.append({
                        "Filename": result["filename"],
                        "Vendor": result["vendor"],
                        "Confidence": result["confidence"],
                        "Source PDF": "✅ Copied" if result.get("source_success", False) else "❌ Failed",
                        "Text File": "✅ Uploaded" if result["text_success"] else "❌ Failed",
                        "JSON File": "✅ Uploaded" if result["json_success"] else "❌ Failed",
                        "CSV File": "✅ Uploaded" if result.get("csv_success", False) else "❌ Failed"
                    })
                
                upload_df = pd.DataFrame(upload_rows)
                st.dataframe(upload_df, use_container_width=True)
