def insert_begin_log(filename, source_path, config):
    if not config.get("logging", {}).get("enabled", True):
        print("[INFO] Logging disabled — skipping BEGIN insert.")
        return None

    conn_str = config["sql_server"]["connection_string"]
    table_name = config.get("logging", {}).get("table_name", "FileLogs")
    created_by = get_uid_from_conn_string(conn_str)
    created_on = datetime.utcnow()

    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        insert_query = f"""
            INSERT INTO {table_name} (
                FileName, SourceFilePath,
                TargetFilePath, ArchiveFilePath,
                Status, StatusDesc,
                CREATED_ON, CREATED_BY
            )
            OUTPUT INSERTED.DocumentProcessor_Key
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """

        cursor.execute(insert_query, filename, source_path, "", "", "BEGIN", "Started processing file", created_on, created_by)
        row = cursor.fetchone()
        document_id = row[0] if row else None

        conn.commit()
        cursor.close()
        conn.close()

        print(f"[DEBUG] INSERTED DocumentProcessor_Key: {document_id}")
        return document_id

    except Exception as e:
        print(f"[ERROR] BEGIN log failed: {e}")
        return None



def update_log(document_id, target_path, archive_path, status, status_desc, config):
    if not config.get("logging", {}).get("enabled", True):
        print("[INFO] Logging disabled — skipping UPDATE.")
        return

    if document_id is None:
        print("[ERROR] Cannot update log — document_id is None")
        return

    ...
