# Optional: Upload to Azure Blob Storage 
if 'all_pdf_results' in st.session_state and st.session_state.all_pdf_results and blob_service_client:
    with st.expander("Upload Results to Azure Blob Storage"):
        result_upload_container = st.text_input(
            "Output Container Name",
            value=azure_storage_container_name,
            help="Container where results will be uploaded (will be created if doesn't exist)"
        )
        
        if st.button("Upload Results to Blob Storage"):
            with st.spinner("Uploading results..."):
                all_pdf_results = st.session_state.all_pdf_results
                timestamp = st.session_state.last_processing_timestamp or datetime.now().strftime("%Y%m%d_%H%M%S")
                
                blob_upload_results = []
                
                # Create CSV data if not already in session state
                if 'results_df' in st.session_state and not st.session_state.results_df.empty:
                    csv_data = st.session_state.results_df.to_csv(index=False)
                else:
                    try:
                        results_df = create_results_dataframe(all_pdf_results)
                        if not results_df.empty:
                            csv_data = results_df.to_csv(index=False)
                        else:
                            st.warning("Could not create CSV due to data format issues.")
                            csv_data = None
                    except Exception as e:
                        st.error(f"Error creating CSV: {e}")
                        csv_data = None
                
                # Upload CSV file to blob storage (once for all PDFs)
                if csv_data:
                    csv_blob_name = f"financial_data_extraction_{timestamp}.csv"
                    csv_success, csv_url = upload_to_blob_storage(
                        blob_service_client,
                        result_upload_container,
                        csv_blob_name,
                        csv_data,
                        "text/csv"
                    )
                    
                    # Store CSV upload result
                    csv_upload_result = {
                        "filename": "All PDFs (CSV)",
                        "csv_success": csv_success,
                        "csv_url": csv_url if csv_success else None
                    }
                
                # Continue with individual PDF uploads
                for pdf_result in all_pdf_results:
                    filename = pdf_result["filename"]
                    base_filename = os.path.splitext(filename)[0]
                    
                    # Create the text content with key-value pairs
                    page_results_text = create_page_results_text(pdf_result)
                    
                    # Create timestamp filename
                    timestamp_filename = f"{base_filename}_{timestamp}"
                    
                    # Upload text file to blob storage
                    text_blob_name = f"{timestamp_filename}.txt"
                    text_success, text_url = upload_to_blob_storage(
                        blob_service_client,
                        result_upload_container,
                        text_blob_name,
                        page_results_text,
                        "text/plain"
                    )
                    
                    # Upload JSON to blob storage
                    json_blob_name = f"{timestamp_filename}.json"
                    pdf_json = json.dumps(pdf_result, ensure_ascii=False, indent=2)
                    json_success, json_url = upload_to_blob_storage(
                        blob_service_client,
                        result_upload_container,
                        json_blob_name,
                        pdf_json,
                        "application/json"
                    )
                    
                    # Store results
                    blob_upload_results.append({
                        "filename": filename,
                        "text_success": text_success,
                        "text_url": text_url if text_success else None,
                        "json_success": json_success,
                        "json_url": json_url if json_success else None
                    })
                
                # Add CSV upload result to results if CSV was uploaded
                if csv_data and 'csv_upload_result' in locals():
                    blob_upload_results.append(csv_upload_result)
                
                # Display upload results
                st.subheader("Azure Blob Storage Upload Results")
                
                # Create a table to show upload results
                upload_rows = []
                for result in blob_upload_results:
                    row = {"Filename": result["filename"]}
                    
                    # Add text and JSON columns if they exist in the result
                    if "text_success" in result:
                        row["Text File"] = "✅ Uploaded" if result["text_success"] else "❌ Failed"
                    
                    if "json_success" in result:
                        row["JSON File"] = "✅ Uploaded" if result["json_success"] else "❌ Failed"
                    
                    # Add CSV column if it exists in the result
                    if "csv_success" in result:
                        row["CSV File"] = "✅ Uploaded" if result["csv_success"] else "❌ Failed"
                    
                    upload_rows.append(row)
                
                upload_df = pd.DataFrame(upload_rows)
                st.dataframe(upload_df, use_container_width=True)
