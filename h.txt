from openai import AzureOpenAI
from pydantic import BaseModel, Field
from typing import Literal
import base64
import fitz  # PyMuPDF
from PyPDF2 import PdfReader, PdfWriter
import os

# Define the classification schema
class DocumentClassification(BaseModel):
    document_type: Literal["Terms & Conditions", "General Terms and Conditions", 
                          "Sale Order", "Delivery", "Price and Payment", 
                          "Warranty", "Other"] = Field(
        description="The type of document based on its content and structure"
    )

# Initialize Azure OpenAI client
openai_client = AzureOpenAI(
    api_key="YOUR_API_KEY",  
    api_version="2023-12-01-preview",
    azure_endpoint="https://YOUR_RESOURCE_NAME.openai.azure.com"
)

# System prompt for document classification
system_prompt = """
You are a document classification expert. Analyze the provided document image and classify it into one of the following categories:
- Terms & Conditions
- General Terms and Conditions
- Sale Order
- Delivery
- Price and Payment
- Warranty
- Other

Only return one of these exact category names.
"""

# Function to convert PDF page to image and get base64
def get_page_image_base64(pdf_path, page_num):
    doc = fitz.open(pdf_path)
    page = doc.load_page(page_num)
    pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))
    image_bytes = pix.tobytes("png")
    doc.close()
    return base64.b64encode(image_bytes).decode('utf-8')

# Function to classify a document page
def classify_document_page(pdf_path, page_num):
    base64_image = get_page_image_base64(pdf_path, page_num)
    
    user_content = [
        {
            "type": "text",
            "text": "Classify this document page according to the schema."
        },
        {
            "type": "image_url",
            "image_url": {
                "url": f"data:image/png;base64,{base64_image}"
            }
        }
    ]
    
    completion = openai_client.beta.chat.completions.parse(
        model="YOUR_GPT4V_DEPLOYMENT_NAME",
        messages=[
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": user_content
            }
        ],
        response_format=DocumentClassification,
        max_tokens=256,
        temperature=0.1,
        top_p=0.1
    )
    
    return completion.document_type

# Function to save page with classified name
def save_classified_page(pdf_path, page_num, doc_type):
    # Create sanitized filename
    doc_type_sanitized = doc_type.replace(" & ", "_").replace(" ", "_")
    output_filename = f"page_{page_num+1}_{doc_type_sanitized}.pdf"
    
    # Extract and save the page
    pdf_reader = PdfReader(pdf_path)
    pdf_writer = PdfWriter()
    pdf_writer.add_page(pdf_reader.pages[page_num])
    
    with open(output_filename, "wb") as output_file:
        pdf_writer.write(output_file)
    
    return output_filename

# Main process
def process_document(pdf_path):
    pdf_reader = PdfReader(pdf_path)
    total_pages = len(pdf_reader.pages)
    
    print(f"Processing {pdf_path} with {total_pages} pages")
    
    # Classify and save each page
    for page_num in range(total_pages):
        print(f"Processing page {page_num+1}/{total_pages}...")
        
        # Classify the page
        doc_type = classify_document_page(pdf_path, page_num)
        
        # Save the classified page
        output_file = save_classified_page(pdf_path, page_num, doc_type)
        
        print(f"Page {page_num+1}: Classified as '{doc_type}' â†’ Saved as '{output_file}'")
    
    print("\nClassification complete. All pages have been processed and saved with their classification names.")

# Run the process
if __name__ == "__main__":
    input_pdf = "invoice_documents.pdf"  # Replace with your PDF path
    process_document(input_pdf)
