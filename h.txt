import fitz  # PyMuPDF
import cv2
import numpy as np
from PIL import Image

# Convert PDF page to image (first page only)
def pdf_to_image(pdf_path, dpi=300):
    doc = fitz.open(pdf_path)
    page = doc.load_page(0)
    pix = page.get_pixmap(dpi=dpi)
    img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.height, pix.width, pix.n)
    if pix.n == 4:
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
    return img

# Remove white background from overlay image
def remove_white_background(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, alpha = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY_INV)
    b, g, r = cv2.split(img)
    rgba = cv2.merge([b, g, r, alpha])
    return rgba

# Overlay image with alpha channel on background
def overlay_transparent(background, overlay_rgba):
    overlay_rgb = overlay_rgba[:, :, :3]
    alpha_mask = overlay_rgba[:, :, 3] / 255.0
    alpha_mask = np.stack([alpha_mask] * 3, axis=-1)

    background = background.astype(float)
    overlay_rgb = overlay_rgb.astype(float)

    combined = (overlay_rgb * alpha_mask + background * (1 - alpha_mask)).astype(np.uint8)
    return combined

# === Load PDFs and Process ===
bg_img = pdf_to_image("background.pdf")
overlay_img = pdf_to_image("filled.pdf")
overlay_rgba = remove_white_background(overlay_img)

# Resize overlay to match background size (optional)
overlay_rgba = cv2.resize(overlay_rgba, (bg_img.shape[1], bg_img.shape[0]))

# Overlay images
result_img = overlay_transparent(bg_img, overlay_rgba)

# Save as PDF using PIL
result_pil = Image.fromarray(result_img)
result_pil.save("final_output.pdf", "PDF", resolution=300.0)



-----

import fitz  # PyMuPDF
import cv2
import numpy as np
from PIL import Image
import os

# Convert a single-page PDF to an image
def pdf_to_image(pdf_path, dpi=300):
    if not os.path.exists(pdf_path):
        raise FileNotFoundError(f"PDF file not found: {pdf_path}")
    
    doc = fitz.open(pdf_path)
    if len(doc) == 0:
        raise ValueError(f"No pages found in PDF: {pdf_path}")

    page = doc.load_page(0)  # first page
    pix = page.get_pixmap(dpi=dpi)

    if pix.samples is None:
        raise ValueError(f"Failed to render PDF to image: {pdf_path}")
    
    # Support RGB or RGBA
    img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.height, pix.width, pix.n)
    if pix.n == 4:
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
    return img

# Remove white background (make it transparent)
def remove_white_background(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, alpha = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY_INV)
    b, g, r = cv2.split(img)
    rgba = cv2.merge([b, g, r, alpha])
    return rgba

# Overlay transparent image onto background
def overlay_transparent(background, overlay_rgba):
    overlay_rgb = overlay_rgba[:, :, :3]
    alpha = overlay_rgba[:, :, 3] / 255.0
    alpha = np.stack([alpha]*3, axis=-1)

    blended = (overlay_rgb * alpha + background * (1 - alpha)).astype(np.uint8)
    return blended

# === Load and Process ===
background_pdf = "background.pdf"
overlay_pdf = "filled.pdf"

bg_img = pdf_to_image(background_pdf)
overlay_img = pdf_to_image(overlay_pdf)
overlay_rgba = remove_white_background(overlay_img)

# Resize overlay to match background size
overlay_rgba = cv2.resize(overlay_rgba, (bg_img.shape[1], bg_img.shape[0]))

# Overlay
final_img = overlay_transparent(bg_img, overlay_rgba)

# Save as PDF
Image.fromarray(final_img).save("final_output.pdf", "PDF", resolution=300.0)
