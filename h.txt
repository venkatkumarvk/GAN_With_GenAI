# logger_helpers.py

import pandas as pd
import pyodbc
from pathlib import Path

LOG_CSV_PATH = Path("logs/process_log.csv")

def log_file_status(
    document_id,
    filename,
    source_path,
    target_path,
    archive_path,
    status,
    status_desc="",
    config=None
):
    log_config = config.get("logging", {}) if config else {}
    store_csv = log_config.get("store_csv", True)
    store_sql = log_config.get("store_sql", False)

    # -------------------------
    # 1. LOG TO CSV (optional)
    # -------------------------
    if store_csv:
        try:
            log_entry = {
                "DocumentID": document_id,
                "FileName": filename,
                "SourceFilePath": source_path,
                "TargetFilePath": target_path,
                "ArchiveFilePath": archive_path,
                "Status": status,
                "StatusDesc": status_desc
            }
            df = pd.DataFrame([log_entry])
            LOG_CSV_PATH.parent.mkdir(parents=True, exist_ok=True)
            if not LOG_CSV_PATH.exists():
                df.to_csv(LOG_CSV_PATH, index=False)
            else:
                df.to_csv(LOG_CSV_PATH, mode='a', header=False, index=False)
        except Exception as e:
            print(f"[CSV LOGGING ERROR] {e}")

    # -------------------------
    # 2. LOG TO SQL SERVER
    # -------------------------
    if store_sql:
        try:
            sql_conf = config.get("sql_server", {})
            conn_str = sql_conf["connection_string"]
            proc_name = sql_conf.get("procedure_name", "LogFileStatus")

            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()

            cursor.execute(f"""
                EXEC {proc_name} ?, ?, ?, ?, ?, ?, ?
            """, document_id, filename, source_path, target_path, archive_path, status, status_desc)

            conn.commit()
            cursor.close()
            conn.close()

        except Exception as e:
            print(f"[SQL STORED PROC ERROR] {e}")
---
import uuid
document_id = str(uuid.uuid4())

log_file_status(
    document_id=document_id,
    filename=blob_name.split("/")[-1],
    source_path=full_blob_path,
    target_path="",
    archive_path="",
    status="BEGIN",
    status_desc="Started processing",
    config=config
)
log_file_status(
    document_id=entry["document_id"],
    filename=entry["filename"],
    source_path=entry["source_path"],
    target_path=entry["target_path"],
    archive_path=entry["archive_path"],
    status=entry["status"],
    status_desc=entry["status_desc"],
    config=config
)
