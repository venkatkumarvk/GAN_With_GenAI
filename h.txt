import cv2
import numpy as np
from pdf2image import convert_from_path
from PIL import Image

# === Step 1: Convert PDF pages to high-resolution images ===
empty_pdf_path = "Sample 1500_2012_02_removed.pdf"
filled_pdf_path = "1000265175.pdf"

# Convert to images
empty_page = convert_from_path(empty_pdf_path, dpi=300)[0]
filled_page = convert_from_path(filled_pdf_path, dpi=300)[0]

# Convert PIL to OpenCV format
empty_img = cv2.cvtColor(np.array(empty_page), cv2.COLOR_RGB2GRAY)
filled_img = cv2.cvtColor(np.array(filled_page), cv2.COLOR_RGB2GRAY)

# Resize to match if needed
if empty_img.shape != filled_img.shape:
    filled_img = cv2.resize(filled_img, (empty_img.shape[1], empty_img.shape[0]))

# === Step 2: Background subtraction (absolute difference) ===
diff = cv2.absdiff(filled_img, empty_img)

# Threshold to isolate only the text/writing
_, mask = cv2.threshold(diff, 30, 255, cv2.THRESH_BINARY)

# Convert to 3-channel mask to apply on color
filled_color = cv2.cvtColor(np.array(filled_page), cv2.COLOR_RGB2BGR)
mask_3ch = cv2.merge([mask, mask, mask])
text_only = cv2.bitwise_and(filled_color, mask_3ch)

# === Step 3: Convert empty PDF to color image ===
empty_color = cv2.cvtColor(np.array(empty_page), cv2.COLOR_RGB2BGR)

# Overlay the extracted text/writing on the clean form
if text_only.shape != empty_color.shape:
    text_only = cv2.resize(text_only, (empty_color.shape[1], empty_color.shape[0]))

output_img = cv2.addWeighted(empty_color, 1.0, text_only, 1.0, 0)

# === Step 4: Save the result as PDF ===
final_rgb = cv2.cvtColor(output_img, cv2.COLOR_BGR2RGB)
final_pil = Image.fromarray(final_rgb)
final_pil.save("final_clean_overlay.pdf")

print("âœ… Final output saved as 'final_clean_overlay.pdf'")

