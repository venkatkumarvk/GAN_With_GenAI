"logging": {
  "store_csv": true,
  "store_sql": false
}

"sql_server": {
  "connection_string": "Driver={ODBC Driver 17 for SQL Server};Server=YOUR_SERVER_NAME;Database=YOUR_DB_NAME;UID=your_user;PWD=your_password;",
  "table_name": "FileLogs"
}

--------------

  # logger_helpers.py

import pandas as pd
import pyodbc
from pathlib import Path
from datetime import datetime

LOG_CSV_PATH = Path("logs/process_log.csv")

def log_file_status(filename, source_path, target_path, status, status_desc="", config=None):
    timestamp = datetime.now().isoformat()

    log_entry = {
        "FileName": filename,
        "SourceFilePath": source_path,
        "TargetFilePath": target_path,
        "Status": status,
        "StatusDesc": status_desc,
        "Timestamp": timestamp
    }

    # Read logging config
    log_config = config.get("logging", {}) if config else {}
    store_csv = log_config.get("store_csv", True)
    store_sql = log_config.get("store_sql", False)

    # ðŸ”¹ Store in CSV if enabled
    if store_csv:
        try:
            row_df = pd.DataFrame([log_entry])
            if not LOG_CSV_PATH.exists():
                row_df.to_csv(LOG_CSV_PATH, index=False)
            else:
                row_df.to_csv(LOG_CSV_PATH, mode='a', header=False, index=False)
        except Exception as e:
            print(f"[CSV LOGGING ERROR] {e}")

    # ðŸ”¹ Store in SQL if enabled
    if store_sql:
        try:
            sql_conf = config.get("sql_server", {})
            conn_str = sql_conf["connection_string"]
            table_name = sql_conf["table_name"]

            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            cursor.execute(f"""
                INSERT INTO {table_name}
                (FileName, SourceFilePath, TargetFilePath, Status, StatusDesc, Timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, filename, source_path, target_path, status, status_desc, timestamp)
            conn.commit()
            cursor.close()
            conn.close()
        except Exception as e:
            print(f"[SQL LOGGING ERROR] {e}")

  -----------------------------
                  main.py

                  log_file_status(
    filename=pdf_file.name,
    source_path=str(pdf_file),
    target_path=str(output_path),
    status="COMPLETE",
    status_desc="Successfully processed and saved CSV"
)


log_file_status(
    filename=pdf_file.name,
    source_path=str(pdf_file),
    target_path=str(output_path),
    status="COMPLETE",
    status_desc="Successfully processed and saved CSV",
    config=config
)


---------------------
log_cfg = config.get("logging", {})
print(f"ðŸ”¹ Logging to CSV: {log_cfg.get('store_csv', True)}")
print(f"ðŸ”¹ Logging to SQL: {log_cfg.get('store_sql', False)}")
