# logger_helpers.py

import pyodbc

def log_file_status_begin(filename, source_path, target_path, archive_path, status_desc, config):
    """
    Calls the proc to insert BEGIN log and returns the documentProcessorKey
    """
    try:
        sql_conf = config.get("sql_server", {})
        conn_str = sql_conf["connection_string"]

        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        params = [
            None,  # @documentProcessorKey = NULL â†’ INSERT
            filename,
            source_path,
            target_path,
            archive_path,
            'BEGIN',
            status_desc
        ]

        result = cur.execute("{CALL dbo.uspXUpdateDocumentProcessor (?, ?, ?, ?, ?, ?, ?)}", params).fetchone()
        key = result[0] if result else None

        cur.close()
        conn.close()

        return key

    except Exception as e:
        print(f"[SQL BEGIN ERROR] {e}")
        return None


def log_file_status_update(document_id, filename, source_path, target_path, archive_path, status, status_desc, config):
    """
    Calls the proc to update the same log row using the key
    """
    try:
        sql_conf = config.get("sql_server", {})
        conn_str = sql_conf["connection_string"]

        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        update_params = [
            document_id,  # @documentProcessorKey = actual key
            filename,
            source_path,
            target_path,
            archive_path,
            status,
            status_desc
        ]

        cur.execute("{CALL dbo.uspXUpdateDocumentProcessor (?, ?, ?, ?, ?, ?, ?)}", update_params)

        conn.commit()
        cur.close()
        conn.close()

    except Exception as e:
        print(f"[SQL UPDATE ERROR] {e}")
