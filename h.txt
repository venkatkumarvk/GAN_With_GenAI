def has_high_confidence(pdf_result, threshold=95.0):
    """
    Determine if all fields in a PDF result have confidence scores at or above threshold.
    
    Parameters:
    - pdf_result: A single PDF extraction result object
    - threshold: Confidence threshold percentage (default: 95.0)
    
    Returns:
    - True if all fields have confidence scores at or above threshold, False otherwise
    """
    for page in pdf_result["pages"]:
        data = page["data"]
        
        # Skip error pages
        if "error" in data:
            return False
        
        # Check confidence for each field
        for field_name, field_data in data.items():
            # Skip non-field entries
            if field_name not in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                               "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                               "Freight", "Salestax", "Total"]:
                continue
                
            # Extract confidence score
            confidence = 0
            if isinstance(field_data, dict) and "confidence" in field_data:
                confidence = field_data["confidence"] * 100  # Convert to percentage
            
            # If any field has confidence below threshold, return False
            if confidence < threshold:
                return False
    
    # All fields passed the threshold check
    return True

#2nd

# In the Azure Blob Storage upload section
# After creating the CSV data but before uploading

# Determine if this PDF has high confidence
is_high_confidence = has_high_confidence(pdf_result, threshold=95.0)

# Choose the appropriate folder
confidence_folder = "high_confidence/" if is_high_confidence else "low_confidence/"

# Create the blob name with the folder prefix
csv_blob_name = f"{confidence_folder}{base_filename}_{safe_invoice_number}_{safe_total_amount}_{timestamp}.csv"

# Upload CSV to blob storage
csv_success, csv_url = upload_to_blob_storage(
    blob_service_client,
    result_upload_container,
    csv_blob_name,
    pdf_csv,
    "text/csv"
)

#3rd

# In the download individual CSVs section
if st.button("Prepare Individual PDF CSVs", on_click=reset_download_state):
    with st.spinner("Preparing individual CSV files..."):
        try:
            # Generate CSV data in the same format as blob storage
            pdf_csv_data = create_blob_format_csv(all_pdf_results)
            
            if pdf_csv_data:
                # Create a zip file with individual CSVs
                zip_buffer = io.BytesIO()
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                # Count high and low confidence files
                high_confidence_count = 0
                low_confidence_count = 0
                
                with zipfile.ZipFile(zip_buffer, 'a', zipfile.ZIP_DEFLATED, False) as zip_file:
                    for pdf_data in pdf_csv_data:
                        filename = pdf_data["filename"]
                        base_filename = os.path.splitext(filename)[0]
                        invoice_number = pdf_data["invoice_number"]
                        total_amount = pdf_data["total_amount"]
                        df = pdf_data["dataframe"]
                        
                        # Determine if this PDF has high confidence
                        pdf_index = next((i for i, pdf in enumerate(all_pdf_results) if pdf["filename"] == filename), -1)
                        if pdf_index >= 0:
                            is_high_confidence = has_high_confidence(all_pdf_results[pdf_index], threshold=95.0)
                        else:
                            is_high_confidence = False
                        
                        # Choose the appropriate folder
                        confidence_folder = "high_confidence/" if is_high_confidence else "low_confidence/"
                        
                        # Count files in each category
                        if is_high_confidence:
                            high_confidence_count += 1
                        else:
                            low_confidence_count += 1
                        
                        # Convert to CSV
                        csv_data = df.to_csv(index=False)
                        
                        # Use the requested filename format with folder
                        csv_filename = f"{confidence_folder}{base_filename}_{invoice_number}_{total_amount}_{timestamp}.csv"
                        
                        # Add to zip
                        zip_file.writestr(csv_filename, csv_data)
                
                # Seek to beginning
                zip_buffer.seek(0)
                
                # Store in session state
                st.session_state.individual_csvs_zip = zip_buffer
                st.session_state.download_completed = True
                st.success(f"CSV files prepared: {high_confidence_count} high confidence, {low_confidence_count} low confidence")
            else:
                st.warning("No data available to create CSV files")
        except Exception as e:
            st.error(f"Error creating individual CSV files: {e}")

#4th
# After blob upload, update the result table to include confidence category
upload_rows = []
for result in blob_upload_results:
    # Find the PDF result
    pdf_index = next((i for i, pdf in enumerate(all_pdf_results) if pdf["filename"] == result["filename"]), -1)
    
    if pdf_index >= 0:
        is_high_confidence = has_high_confidence(all_pdf_results[pdf_index], threshold=95.0)
        confidence_category = "High (≥95%)" if is_high_confidence else "Low (<95%)"
    else:
        confidence_category = "Unknown"
    
    upload_rows.append({
        "Filename": result["filename"],
        "Confidence Category": confidence_category,
        "Text File": "✅ Uploaded" if result.get("text_success", False) else "❌ Failed",
        "JSON File": "✅ Uploaded" if result.get("json_success", False) else "❌ Failed",
        "CSV File": "✅ Uploaded" if result.get("csv_success", False) else "❌ Failed"
    })

upload_df = pd.DataFrame(upload_rows)
st.dataframe(upload_df, use_container_width=True)
