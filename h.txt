# PDF Processing System - Detailed Flow Documentation

## 1. PDF File Processing

### Converting PDF to Images

**Objective:** Convert each PDF page to an image for AI processing

**Function:** `extract_pdf_pages()` and `pdf_bytes_to_image()`

**Key Steps:**
1. Use PyMuPDF (fitz) to open the PDF file and access individual pages
2. Render each page as a pixmap at 2x zoom for better resolution  
3. Convert pixmap to bytes
4. Encode to base64 format for API transmission

**Output:** List of tuples containing (page_number, base64_image_string)

---

### Converting Images to Data URLs

**Objective:** Format the image for use with the Azure OpenAI API

**Function:** `create_formatted_prompt()` with base64 integration

**Key Steps:**
1. Take base64 encoded image data
2. Prepend with data URL format: "data:image/jpeg;base64,"
3. Embed in message structure for vision API
4. Combine with document-specific prompts

**Output:** Properly formatted API request with embedded images

---

## 2. Document Classification and Routing

### Document Type Detection

**Objective:** Route documents to appropriate processing pipeline based on type

**Function:** `get_document_config()`

**Key Steps:**
1. Parse command line argument for document type (--doctype)
2. Validate document type exists in configuration
3. Load document-specific extraction fields
4. Import appropriate prompt module dynamically
5. Configure AI model settings for document type

**Output:** Complete configuration tuple with fields, prompts, and model settings

---

## 3. Overlay Processing (Claims Only)

### Smart Overlay Detection

**Objective:** Determine if claim documents need overlay enhancement

**Function:** `needs_overlay()` and `is_similar_to_reference()`

**Key Steps:**
1. **Content Density Analysis**
   - Calculate ratio of non-white pixels to total pixels
   - Threshold: < 30% indicates sparse/empty document
   
2. **Reference Similarity Check**
   - Extract image features (histogram + edge density)
   - Compare with reference template using cosine similarity
   - Threshold: ≥ 70% similarity indicates matching layout
   
3. **Overlay Decision Logic**
   - Apply overlay ONLY if: sparse content AND similar to reference
   - Skip overlay for pre-filled or dissimilar documents

**Output:** Boolean decision per page + reasoning

---

### Overlay Application Process

**Objective:** Apply transparent red/black table overlay to enhance form structure

**Function:** `apply_overlay_to_page()`

**Key Steps:**
1. Load overlay template PDF and convert to image
2. Resize overlay to match background document dimensions
3. Remove white background from overlay (create transparency)
4. Blend overlay with original using alpha compositing
5. Convert enhanced image back to PDF format

**Output:** Enhanced PDF with overlay applied to qualifying pages only

---

## 4. AI Processing Pipeline

### Multi-Model AI Processing

**Objective:** Extract structured data using document-specific AI models

**Function:** `process_general()` or `process_batch()`

**Key Steps:**
1. **Request Preparation**
   - Use document-specific system prompt for AI role context
   - Format user prompt with extraction fields
   - Embed base64 images in message structure
   
2. **Model Selection**
   - Route to document-specific Azure OpenAI deployment
   - Use specialized models: gpt-4-vision-invoice, gpt-4-vision-claim, etc.
   
3. **API Communication**
   - Send structured requests to Azure OpenAI
   - Handle authentication and rate limiting
   - Process responses with error handling

**Output:** Structured JSON with extracted data and confidence scores

---

### Batch vs General Processing

**Objective:** Optimize processing based on volume and requirements

**Function:** Mode selection based on `--apitype` parameter

**Key Steps:**
1. **General API Mode**
   - Real-time processing with immediate results
   - Better for development and small batches
   - Higher per-request cost but faster feedback
   
2. **Batch API Mode**
   - Bulk processing for large volumes
   - Cost-effective for production workloads
   - Batch submission with delayed results retrieval

**Output:** Same structured data format regardless of processing mode

---

## 5. Confidence Analysis and Classification

### Confidence Score Evaluation

**Objective:** Analyze extraction confidence and classify results

**Function:** `has_high_confidence()` and confidence aggregation

**Key Steps:**
1. **Score Collection**
   - Extract overall_confidence from each page result
   - Handle multi-page documents by averaging scores
   
2. **Threshold Comparison**
   - Compare average confidence against configured threshold (default: 80%)
   - Account for document type variations in confidence patterns
   
3. **Classification Decision**
   - High confidence: ≥ threshold → high_confidence/ folder
   - Low confidence: < threshold → low_confidence/ folder

**Output:** Boolean classification + folder path assignment

---

## 6. Data Structuring and CSV Generation

### Dynamic CSV Creation

**Objective:** Generate structured CSV output adapted to document type

**Function:** `create_csv_for_results()`

**Key Steps:**
1. **Header Generation**
   - Create dynamic headers: filename, page_number, document_type + extraction_fields + confidence
   - Adapt to different field sets per document type
   
2. **Data Population**
   - Extract field values from AI JSON responses
   - Handle missing data with "N/A" values
   - Include per-page confidence scores
   
3. **Filename Generation**
   - Use primary fields (first two extraction fields) in filename
   - Format: `{doc_type}_{base_filename}_{primary_field}_{secondary_field}_{timestamp}.csv`

**Output:** CSV content + primary/secondary field values for naming

---

## 7. Storage Organization and Management

### Structured Storage System

**Objective:** Organize processed files in logical folder hierarchy

**Function:** `upload_to_storage()` with path management

**Key Steps:**
1. **Folder Structure Creation**
   ```
   output_container/
   ├── high_confidence/
   ├── low_confidence/
   └── source_documents/
       ├── invoice/high_confidence/
       ├── invoice/low_confidence/
       ├── claim/high_confidence/
       └── claim/low_confidence/
   ```

2. **File Upload Process**
   - CSV results go to confidence-based folders
   - Source PDFs go to document-type + confidence folders
   - Generate unique timestamped filenames
   
3. **Metadata Preservation**
   - Maintain original filename references
   - Include extraction results in filenames
   - Preserve processing timestamps

**Output:** Organized file structure with proper categorization

---

## 8. Archive Management System

### Intelligent Archiving

**Objective:** Package and archive processed files with cleanup

**Function:** `move_files_to_archive()`

**Key Steps:**
1. **File Categorization**
   - Track successfully processed files
   - Identify files that failed processing
   - Maintain processing status throughout pipeline
   
2. **ZIP Archive Creation**
   ```
   archive_YYYYMMDD_HHMMSS.zip
   ├── processed/
   │   ├── file1.pdf (successful)
   │   └── file2.pdf (successful)
   └── unprocessed/
       ├── corrupted.pdf (failed)
       └── invalid.pdf (failed)
   ```
   
3. **Cleanup Operations**
   - Upload archive to dedicated container
   - Delete original files from input container
   - Maintain audit trail of archiving actions

**Output:** Timestamped archive with organized success/failure separation

---

## 9. Process Flow Diagram

```
┌─────────────────────────┐
│   PDF Source Selection  │
│ Upload Files or Azure   │
│    Blob Storage        │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│    process_pdf() /      │
│  process_blob_pdfs()    │
│ Convert PDF pages to    │
│       images           │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   image_to_data_url()   │
│ Format images for API   │
│     consumption        │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│ Process_and_categorize() │
│  Classify pages &       │
│ Extract Data with Azure │
│       GPT-4O           │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐    ┌──────────────────────┐
│ Filter Logic in process │───▶│  show_manual_editing │
│  Skip non-invoice      │    │    interface()       │
│     category          │    │ apply_edits_to_result│
└─────────┬──────────────┘    │    manual edit       │
          │                    └──────────────────────┘
          ▼                             │
┌─────────────────────────┐             │
│ all_pages_results_in    │◄────────────┘
│    process_pdf()       │
│ Store structured       │
│  extraction results    │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│evaluate_extraction_     │
│    result()            │
│ Analyze Confidence     │
│      Scores           │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐    ┌──────────────────────┐
│create_invoice_dataframe│───▶│ show_manual_editing_ │
│ Generate Results Table │    │     interface()      │
└─────────┬───────────────┘    │ apply_edits_to_result│
          │                    │     Manual edit      │
          ▼                    └──────────────────────┘
┌─────────────────────────┐             │
│   create_file_manager   │◄────────────┘
│   create_invoice_form   │
│   Generate Output Files │
└─────────────────────────┘
```

---

## 10. Enhanced Process Flow with Overlay Support

```
┌─────────────────────────┐
│     Input PDF Files     │
│  Azure Blob / Local     │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   Document Type Router  │
│  get_document_config()  │
│ Load fields, prompts,   │
│    models, overlay      │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐    ┌─────────────────────────┐
│    Overlay Decision     │    │    Skip Overlay         │
│      (Claims Only)      │───▶│  (Invoice, EOB, etc.)   │
│ Content + Similarity    │    │                         │
│      Analysis          │    │                         │
└─────────┬───────────────┘    └─────────┬───────────────┘
          │                              │
          ▼                              │
┌─────────────────────────┐              │
│   Apply Overlay         │              │
│ process_pdf_with_       │              │
│      overlay()          │              │
└─────────┬───────────────┘              │
          │                              │
          ▼◄─────────────────────────────┘
┌─────────────────────────┐
│   PDF to Image          │
│ extract_pdf_pages()     │
│  Convert to base64      │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   AI Processing         │
│ Document-specific       │
│ prompts + models        │
│ process_general/batch() │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│ Confidence Analysis     │
│ has_high_confidence()   │
│   Classification        │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   CSV Generation        │
│create_csv_for_results() │
│ Dynamic field mapping   │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   Storage Upload        │
│ Confidence-based folders│
│ upload_to_storage()     │
└─────────┬───────────────┘
          │
          ▼
┌─────────────────────────┐
│   Archive Management    │
│move_files_to_archive()  │
│    ZIP + Cleanup        │
└─────────────────────────┘
```

---

## 11. Function-Level Process Details

### PDF Processing Chain
```
main() 
  └─ process_azure_pdf_files()
      ├─ get_document_config() → Load document settings
      ├─ OverlayProcessor.process_pdf_with_overlay() → Enhance claims
      ├─ PDFProcessor.extract_pdf_pages() → Convert to images
      ├─ AzureOpenAIClient.process_general() → AI extraction
      ├─ PDFProcessor.create_csv_for_results() → Generate CSV
      ├─ AzureStorageHelper.upload_to_storage() → Upload results
      └─ AzureStorageHelper.move_files_to_archive() → Archive originals
```

### Overlay Processing Chain (Claims)
```
OverlayProcessor.process_pdf_with_overlay()
  └─ For each page:
      ├─ pdf_bytes_to_image() → Convert page to image
      ├─ needs_overlay() → Decision logic
      │   ├─ calculate_content_density() → Sparse check
      │   └─ is_similar_to_reference() → Layout check
      ├─ apply_overlay_to_page() → Enhance if needed
      │   ├─ pdf_file_to_image() → Load overlay template
      │   ├─ remove_white_background() → Create transparency
      │   └─ overlay_transparent() → Blend images
      └─ Convert back to PDF format
```

### Error Handling Flow
```
Try-Catch Structure:
  ├─ File Level: Continue processing other files
  ├─ Page Level: Skip problematic pages, process remainder  
  ├─ Batch Level: Retry with smaller batch size
  ├─ API Level: Exponential backoff retry
  └─ Critical Level: Stop processing, require intervention
```

This documentation format matches your reference style with detailed explanations, clear function names, step-by-step processes, and comprehensive flow diagrams showing the complete system architecture and data flow.
