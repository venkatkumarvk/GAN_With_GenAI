# Simple Automatic PDF Overlay - No Manual Coordinates Required

from PyPDF2 import PdfReader, PdfWriter
import fitz  # PyMuPDF

# METHOD 1: Simple Automatic Overlay (Recommended for your case)
def auto_overlay_same_layout(blank_pdf_path, filled_pdf_path, output_path):
    """
    Automatically overlay filled PDF onto blank PDF.
    Perfect when both PDFs have identical layout.
    NO manual coordinates needed!
    """
    try:
        # Read both PDFs
        blank_pdf = PdfReader(blank_pdf_path)
        filled_pdf = PdfReader(filled_pdf_path)
        writer = PdfWriter()
        
        print(f"üìÑ Blank PDF: {len(blank_pdf.pages)} pages")
        print(f"üìÑ Filled PDF: {len(filled_pdf.pages)} pages")
        
        # Process each page
        for page_num in range(len(blank_pdf.pages)):
            blank_page = blank_pdf.pages[page_num]
            
            # If filled PDF has this page, overlay it
            if page_num < len(filled_pdf.pages):
                filled_page = filled_pdf.pages[page_num]
                blank_page.merge_page(filled_page)
                print(f"‚úÖ Overlaid page {page_num + 1}")
            
            writer.add_page(blank_page)
        
        # Save result
        with open(output_path, 'wb') as output_file:
            writer.write(output_file)
        
        print(f"üéâ Success! Created: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

# METHOD 2: PyMuPDF Automatic (Better Quality)
def pymupdf_auto_overlay(blank_pdf_path, filled_pdf_path, output_path):
    """
    Use PyMuPDF for automatic overlay with better quality.
    Still no manual coordinates needed!
    """
    try:
        # Open both documents
        blank_doc = fitz.open(blank_pdf_path)
        filled_doc = fitz.open(filled_pdf_path)
        
        print(f"üìÑ Processing {len(blank_doc)} pages...")
        
        # Process each page
        for page_num in range(len(blank_doc)):
            blank_page = blank_doc[page_num]
            
            if page_num < len(filled_doc):
                filled_page = filled_doc[page_num]
                
                # Get filled page content and overlay it
                blank_page.show_pdf_page(blank_page.rect, filled_doc, page_num)
                print(f"‚úÖ Overlaid page {page_num + 1}")
        
        # Save result
        blank_doc.save(output_path)
        blank_doc.close()
        filled_doc.close()
        
        print(f"üéâ Success! Created: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

# METHOD 3: Smart Text Extraction and Auto-Placement
def auto_extract_and_place(blank_pdf_path, filled_pdf_path, output_path):
    """
    Automatically extract text from filled PDF and place on blank PDF.
    Uses original positions - no manual work needed!
    """
    try:
        # Open documents
        blank_doc = fitz.open(blank_pdf_path)
        filled_doc = fitz.open(filled_pdf_path)
        
        print(f"üîç Extracting text from filled PDF...")
        
        # Process each page
        for page_num in range(len(blank_doc)):
            blank_page = blank_doc[page_num]
            
            if page_num < len(filled_doc):
                filled_page = filled_doc[page_num]
                
                # Extract all text with positions
                text_instances = filled_page.get_text("dict")
                
                text_count = 0
                # Add text to blank page at original positions
                for block in text_instances["blocks"]:
                    if "lines" in block:
                        for line in block["lines"]:
                            for span in line["spans"]:
                                text = span["text"].strip()
                                if text and len(text) > 0:
                                    # Use original position and formatting
                                    pos = (span["bbox"][0], span["bbox"][1])
                                    font_size = span["size"]
                                    
                                    blank_page.insert_text(
                                        pos, 
                                        text,
                                        fontsize=font_size,
                                        color=(0, 0, 0)
                                    )
                                    text_count += 1
                
                print(f"‚úÖ Page {page_num + 1}: Added {text_count} text elements")
        
        # Save result
        blank_doc.save(output_path)
        blank_doc.close()
        filled_doc.close()
        
        print(f"üéâ Success! Created: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

# QUICK TEST FUNCTION
def test_all_methods(blank_pdf, filled_pdf):
    """
    Test all automatic methods and see which works best for your PDFs
    """
    print("üß™ Testing All Automatic Overlay Methods")
    print("=" * 50)
    
    methods = [
        ("Method 1 (PyPDF2)", auto_overlay_same_layout, "output_method1.pdf"),
        ("Method 2 (PyMuPDF)", pymupdf_auto_overlay, "output_method2.pdf"),
        ("Method 3 (Smart Extract)", auto_extract_and_place, "output_method3.pdf")
    ]
    
    results = []
    
    for method_name, method_func, output_file in methods:
        print(f"\nüîß Testing {method_name}...")
        success = method_func(blank_pdf, filled_pdf, output_file)
        results.append((method_name, success, output_file))
        
        if success:
            print(f"‚úÖ {method_name} completed successfully")
        else:
            print(f"‚ùå {method_name} failed")
    
    print(f"\nüìä Results Summary:")
    print("-" * 30)
    for method_name, success, output_file in results:
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        print(f"{method_name}: {status}")
        if success:
            print(f"   Output: {output_file}")
    
    return results

# MAIN EXECUTION
if __name__ == "__main__":
    print("üè• Automatic Insurance Form PDF Overlay")
    print("No manual coordinates needed!")
    print("=" * 50)
    
    # Your file paths (change these to match your files)
    blank_form = "blank_insurance_form.pdf"
    filled_form = "filled_insurance_form.pdf"
    
    print(f"üìÇ Blank form: {blank_form}")
    print(f"üìÇ Filled form: {filled_form}")
    
    # Test all methods
    test_all_methods(blank_form, filled_form)
    
    print(f"\nüéØ Recommended for your case:")
    print("   Method 1 (PyPDF2) - Simple and reliable")
    print("   Method 2 (PyMuPDF) - Better quality")
    
    print(f"\nüí° Just run:")
    print(f"   auto_overlay_same_layout('{blank_form}', '{filled_form}', 'final_result.pdf')")

# INSTALLATION (run once)
"""
pip install PyPDF2 PyMuPDF
"""

# USAGE (3 simple steps):
"""
1. Put your PDF files in the same folder as this script
2. Update the file names in the script
3. Run the script - it does everything automatically!
"""
