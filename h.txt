def display_pdf_preview_tab(all_pdf_results, files, input_method, blob_service_client=None, container_name=None):
    """
    Display PDF preview tab after processing.
    All previews are generated directly from memory without creating temporary files.
    Memory optimized version.
    
    Parameters:
    - all_pdf_results: Processed PDF results
    - files: Original files (either uploaded files or blob references)
    - input_method: "Upload Files" or "Azure Blob Storage"
    - blob_service_client: Optional, for Azure Blob Storage
    - container_name: Optional, for Azure Blob Storage
    """
    if not files or not all_pdf_results:
        st.info("No PDFs available to preview")
        return
    
    # Create tabs for each PDF
    pdf_tabs = st.tabs([pdf_result["filename"] for pdf_result in all_pdf_results])
    
    for i, tab in enumerate(pdf_tabs):
        with tab:
            try:
                filename = all_pdf_results[i]["filename"]
                
                if input_method == "Upload Files":
                    # For uploaded files, find the matching file object
                    file_obj = next((f for f in files if hasattr(f, 'name') and f.name == filename), None)
                    
                    if file_obj:
                        # Get file position and reset after use
                        pos = file_obj.tell()
                        with st.spinner(f"Loading {filename}..."):
                            base64_pdf = convert_pdf_to_base64(file_obj)
                        file_obj.seek(pos)  # Reset file position
                    else:
                        st.error(f"Could not find original file for {filename}")
                        continue
                else:
                    # For blob files, find the matching blob reference or directly use the blob name
                    if isinstance(files, list) and all(isinstance(f, str) for f in files):
                        # List of blob names
                        blob_name = next((b for b in files if b.split('/')[-1] == filename), None)
                        if blob_name is None and filename in files:
                            blob_name = filename
                    else:
                        # Try to extract blob name from filename
                        blob_name = filename
                    
                    if blob_name and blob_service_client and container_name:
                        # Download blob content directly to memory
                        with st.spinner(f"Downloading {filename}..."):
                            blob_content = download_blob_to_memory(blob_service_client, container_name, blob_name)
                        if blob_content:
                            base64_pdf = convert_pdf_to_base64(blob_content)
                        else:
                            st.error(f"Could not download blob content for {filename}")
                            continue
                    else:
                        st.error(f"Could not find original blob for {filename}")
                        continue
                
                if base64_pdf:
                    st.write(f"### Preview of {filename}")
                    display_pdf_viewer(base64_pdf)
                    # Clear memory
                    del base64_pdf
                else:
                    st.error(f"Could not create preview for {filename}")
                    
            except Exception as e:
                st.error(f"Error displaying preview for PDF {i+1}: {e}")
            
            # Force garbage collection after each PDF display
            gc.collect()

#upload

      if st.button("Show PDF Preview"):
    # Get the original input method
    input_method = st.session_state.input_method if "input_method" in st.session_state else "Upload Files"
    
    # Filter to just the selected PDF
    selected_pdf_results = [pdf for pdf in all_pdf_results if pdf["filename"] == selected_pdf_to_preview]
    
    # Display PDF preview for just the selected document
    with st.spinner(f"Loading preview for {selected_pdf_to_preview}..."):
        if input_method == "Upload Files" and 'original_files' in st.session_state:
            # Find matching uploaded file
            files_to_display = [f for f in st.session_state.original_files if hasattr(f, 'name') and f.name == selected_pdf_to_preview]
            display_pdf_preview_tab(selected_pdf_results, files_to_display, input_method)
        elif input_method == "Azure Blob Storage" and 'original_files' in st.session_state and 'blob_container' in st.session_state:
            # For blob storage, pass the blob service client and container
            blob_service_client = get_blob_service_client() if azure_storage_connection_string else None
            if blob_service_client:
                display_pdf_preview_tab(
                    selected_pdf_results,
                    st.session_state.original_files,
                    input_method,
                    blob_service_client,
                    st.session_state.blob_container
                )
            else:
                st.warning("Azure Blob Storage connection is required for preview.")
        else:
            st.warning("Original PDF file references not available for preview. Please reprocess the documents.")

# Process files if requested
if files_to_process:
    with st.spinner("Processing documents..."):
        # Create a container for the whole processing section
        processing_container = st.container()
        
        with processing_container:
            # Store all PDF results
            all_pdf_results = []
            
            # Create a timestamp for the filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            st.session_state.last_processing_timestamp = timestamp
            
            # Add the code right here
            # Store original files reference for preview
            if input_method == "Upload Files":
                st.session_state.original_files = files_to_process
                st.session_state.input_method = "Upload Files"
            else:
                st.session_state.original_files = files_to_process
                st.session_state.input_method = "Azure Blob Storage"
                st.session_state.blob_container = selected_container
            
            # Process the PDFs based on input method
            if input_method == "Upload Files":
                # Process uploaded PDFs
                ...
