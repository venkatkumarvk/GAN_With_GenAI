import cv2
import numpy as np
from pdf2image import convert_from_path
from PIL import Image

# === Step 1: Load PDFs and convert to images ===
empty_pdf_path = "Sample 1500_2012_02_removed.pdf"
filled_pdf_path = "1000265175.pdf"  # Or .jpg if needed

# Convert to images (first page only)
empty_pil = convert_from_path(empty_pdf_path, dpi=300)[0]
filled_pil = convert_from_path(filled_pdf_path, dpi=300)[0]

# Convert to OpenCV (BGR)
empty_img = cv2.cvtColor(np.array(empty_pil), cv2.COLOR_RGB2BGR)
filled_img = cv2.cvtColor(np.array(filled_pil), cv2.COLOR_RGB2BGR)

# === Step 2: Resize to match shapes exactly ===
if empty_img.shape != filled_img.shape:
    filled_img = cv2.resize(filled_img, (empty_img.shape[1], empty_img.shape[0]))

# === Step 3: Convert to grayscale for subtraction ===
gray_empty = cv2.cvtColor(empty_img, cv2.COLOR_BGR2GRAY)
gray_filled = cv2.cvtColor(filled_img, cv2.COLOR_BGR2GRAY)

# Subtract to get only the difference (text/handwriting)
diff = cv2.absdiff(gray_filled, gray_empty)

# Threshold to get binary mask of text only
_, mask = cv2.threshold(diff, 30, 255, cv2.THRESH_BINARY)

# === Step 4: Create 3-channel mask for color overlay ===
mask_3ch = cv2.merge([mask, mask, mask])
text_only = cv2.bitwise_and(filled_img, mask_3ch)

# === Step 5: Overlay text onto the clean form ===
output_img = cv2.addWeighted(empty_img, 1.0, text_only, 1.0, 0)

# === Step 6: Save output as PDF ===
output_rgb = cv2.cvtColor(output_img, cv2.COLOR_BGR2RGB)
output_pil = Image.fromarray(output_rgb)
output_pil.save("final_clean_overlay.pdf")

print("âœ… Final clean overlay saved as 'final_clean_overlay.pdf'")
