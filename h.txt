# In the Extract Data mode section
if current_mode == "Extract Data":
    # Check if Azure OpenAI credentials are available
    if not all([aoai_endpoint, aoai_api_key, aoai_deployment_name]):
        st.error("Azure OpenAI credentials are missing. Please set AOAI_ENDPOINT, AOAI_API_KEY, and AOAI_DEPLOYMENT environment variables.")
        return
    
    # Check if Azure Blob Storage credentials are available
    if not azure_storage_connection_string:
        st.warning("Azure Blob Storage connection string is missing. Some features will be disabled. Please set AZURE_STORAGE_CONNECTION_STRING environment variable.")
    
    # Initialize the clients
    client = get_client()
    blob_service_client = get_blob_service_client() if azure_storage_connection_string else None
    
    # Advanced settings in an expandable section
    with st.expander("Advanced Settings"):
        prompt = st.text_area(
            "Extraction Prompt", 
            """Based on this image, extract the following information from the invoice:   
            1) What is the vendor name?
            2) What is the invoice number?
            3) What is the invoice date?
            4) What is the customer name?
            5) What is the purchase order number?
            6) What is the stock code?
            7) What is the unit price?
            8) What is the invoice amount?
            9) What is the freight cost?
            10) What is the sales tax?
            11) What is the total amount?""",
            help="Customize the prompt sent to Azure OpenAI Vision to extract information"
        )
    
    # Input method selection
    input_method = st.radio(
        "Select Input Method",
        ["Upload Files", "Azure Blob Storage"],
        help="Choose how to input PDF files for processing"
    )
    
    # Add a processing flag in session state
    if 'processing_triggered' not in st.session_state:
        st.session_state.processing_triggered = False

    # Define callback function for the button
    def trigger_processing():
        st.session_state.processing_triggered = True
        
    files_to_process = None
    
    if input_method == "Upload Files":
        # File uploader
        uploaded_files = st.file_uploader(
            "Upload PDF files", 
            type="pdf", 
            accept_multiple_files=True,
            help="Upload one or more PDF files containing financial statements"
        )
        
        # Display previews in sidebar if files are uploaded
        if uploaded_files:
            display_pdf_previews_sidebar(uploaded_files)
        
        # Process button with callback
        process_button = st.button(
            "Process Documents", 
            type="primary",
            on_click=trigger_processing
        )
        
        # Check if processing should be done
        if st.session_state.processing_triggered and not uploaded_files:
            st.warning("Please upload at least one PDF file.")
            st.session_state.processing_triggered = False
            return
            
        files_to_process = uploaded_files if st.session_state.processing_triggered else None
    
    else:  # Azure Blob Storage
        if not blob_service_client:
            st.error("Azure Blob Storage connection is required for this option. Please set AZURE_STORAGE_CONNECTION_STRING environment variable.")
            return
        
        # Get available containers
        containers = get_blob_containers(blob_service_client)
        
        if not containers:
            st.error("No containers found in the Azure Blob Storage account. Please create at least one container.")
            return
        
        # Container selection
        selected_container = st.selectbox(
            "Select Container",
            containers,
            help="Choose an Azure Blob Storage container"
        )
        
        # Get folders in the selected container
        folders = get_blob_folders(blob_service_client, selected_container)
        
        # Folder selection
        selected_folder = st.selectbox(
            "Select Folder",
            folders,
            format_func=lambda x: "Root (No Folder)" if x == "" else x,
            help="Choose a folder within the container"
        )
        
        # List available PDFs
        pdf_blobs = list_pdf_blobs(blob_service_client, selected_container, selected_folder)
        
        if not pdf_blobs:
            st.warning(f"No PDF files found in the selected location. Please choose another container or folder.")
            return
        
        # Show available PDFs
        st.write(f"Found {len(pdf_blobs)} PDF files:")
        
        # Create columns for better display
        pdf_cols = st.columns(3)
        for i, pdf in enumerate(pdf_blobs):
            display_name = pdf.split('/')[-1]  # Remove folder path for display
            pdf_cols[i % 3].write(f"- {display_name}")
            if i >= 11:  # Limit display to avoid cluttering
                pdf_cols[(i + 1) % 3].write("...")
                break
        
        # Display previews in sidebar
        display_pdf_previews_sidebar(pdf_blobs, blob_service_client, selected_container)
        
        # Process button with callback
        process_button = st.button(
            "Process Blob Documents", 
            type="primary",
            on_click=trigger_processing
        )
        
        files_to_process = pdf_blobs if st.session_state.processing_triggered else None

    # Process files if requested
    if files_to_process:
        with st.spinner("Processing documents..."):
            # Create a container for the whole processing section
            processing_container = st.container()
            
            with processing_container:
                # Store all PDF results
                all_pdf_results = []
                
                # Create a timestamp for the filename
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                st.session_state.last_processing_timestamp = timestamp
                
                # Store original files reference for preview
                st.session_state.original_files = files_to_process
                
                # Process the PDFs based on input method
                if input_method == "Upload Files":
                    # Process uploaded PDFs
                    progress_bar = st.progress(0)
                    progress_text = st.empty()
                    
                    # Process each uploaded PDF
                    for i, pdf_file in enumerate(files_to_process):
                        progress_text.text(f"Processing file {i+1}/{len(files_to_process)}: {pdf_file.name}")
                        
                        # Process the PDF and get results
                        pdf_result = process_pdf(
                            pdf_file, 
                            prompt, 
                            client, 
                            aoai_deployment_name,
                            progress_bar,
                            progress_text
                        )
                        
                        # Add to our collection of all PDF results
                        all_pdf_results.append(pdf_result)
                        
                        # Update overall progress
                        progress_bar.progress((i + 1) / len(files_to_process))
                        
                    progress_text.text("Processing complete!")
                    progress_bar.progress(1.0)
                else:
                    # Process PDFs from Blob Storage
                    all_pdf_results = process_blob_pdfs(
                        blob_service_client,
                        selected_container,
                        files_to_process,
                        prompt,
                        client,
                        aoai_deployment_name
                    )
                
                # Store in session state
                st.session_state.all_pdf_results = all_pdf_results
                
                # Create DataFrame view
                if all_pdf_results:
                    try:
                        results_df = create_results_dataframe(all_pdf_results)
                        st.session_state.results_df = results_df
                    except Exception as e:
                        st.error(f"Error creating results DataFrame: {e}")
                
                # Reset edited data when processing new files
                st.session_state.edited_data = {}
                
                # Reset processing flag after processing is complete
                st.session_state.processing_triggered = False
                
                # Show success message and navigation suggestion
                st.success("Processing complete! You can now go to the 'View Results' tab to see the extraction results.")
                
                # Add a button to switch to View Results
                if st.button("Go to View Results"):
                    st.session_state.app_mode = "View Results"
                    st.session_state.sidebar_radio = "View Results"
                    st.experimental_rerun()

  #third

  # Process button for blob storage
process_button = st.button(
    "Process Blob Documents", 
    type="primary",
    on_click=trigger_processing
)

# Check if processing should be done
files_to_process = None
if st.session_state.processing_triggered:
    if pdf_blobs:  # Make sure blobs exist
        files_to_process = pdf_blobs
        # Reset the flag after processing
        st.session_state.processing_triggered = False
    else:
        st.warning("No PDF files found in the selected location.")
        st.session_state.processing_triggered = False
