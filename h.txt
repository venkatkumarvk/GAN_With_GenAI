with view_tabs[4]:  # Bulk Management tab
    st.subheader("Bulk Document Management")
    
    # Toggle between high and low confidence
    confidence_selection = st.radio(
        "Select Document Confidence Level",
        ["High Confidence (≥95%)", "Low Confidence (<95%)"],
        horizontal=True,
        key="confidence_selection"
    )
    
    # Get the threshold from the selection
    is_high_confidence = "High" in confidence_selection
    threshold = 95.0
    
    # Filter documents based on confidence
    if is_high_confidence:
        filtered_docs = [doc for doc in all_pdf_results if has_high_confidence(doc, threshold=threshold)]
        folder_prefix = "high_confidence"
    else:
        filtered_docs = [doc for doc in all_pdf_results if not has_high_confidence(doc, threshold=threshold)]
        folder_prefix = "low_confidence"
    
    # Show document list with processing status
    if filtered_docs:
        # Create a tracking dataframe
        doc_tracking = []
        
        for doc in filtered_docs:
            # Check if document is processed (from session state)
            is_processed = False
            if 'processed_docs' in st.session_state and doc["filename"] in st.session_state.processed_docs:
                is_processed = st.session_state.processed_docs[doc["filename"]]
            
            doc_tracking.append({
                "Filename": doc["filename"],
                "Processed": "✅" if is_processed else "❌"
            })
        
        # Create a DataFrame for the tracking table
        tracking_df = pd.DataFrame(doc_tracking)
        
        # Display the table with checkboxes for selection
        st.write(f"### {confidence_selection} Documents")
        
        # Create data editor with checkboxes for selection
        edited_df = st.data_editor(
            tracking_df,
            column_config={
                "Processed": st.column_config.CheckboxColumn(
                    "Processed",
                    help="Document processing status",
                    default=False,
                    disabled=True
                ),
                "Select": st.column_config.CheckboxColumn(
                    "Select",
                    help="Select for processing",
                    default=False
                )
            },
            hide_index=True,
            key=f"{folder_prefix}_doc_editor"
        )
        
        # Get selected documents for processing
        selected_docs = []
        for i, row in edited_df.iterrows():
            if row.get("Select", False):
                filename = row["Filename"]
                selected_doc = next((doc for doc in filtered_docs if doc["filename"] == filename), None)
                if selected_doc:
                    selected_docs.append(selected_doc)
        
        # Bulk upload button
        if selected_docs:
            st.write(f"Selected {len(selected_docs)} documents for processing")
            
            if st.button(f"Process Selected {confidence_selection} Documents", key=f"process_{folder_prefix}"):
                with st.spinner(f"Processing {len(selected_docs)} documents..."):
                    # Process each selected document
                    processed_results = []
                    
                    for doc in selected_docs:
                        try:
                            filename = doc["filename"]
                            
                            # Extract invoice number and total if available
                            invoice_number = "unknown"
                            total_amount = "unknown"
                            
                            # Find invoice number and total from any page
                            for page in doc["pages"]:
                                if "data" in page:
                                    data = page["data"]
                                    # Check InvoiceNumber
                                    if "InvoiceNumber" in data:
                                        field_data = data["InvoiceNumber"]
                                        if isinstance(field_data, dict):
                                            invoice_number = field_data.get("value", "unknown")
                                    
                                    # Check Total
                                    if "Total" in data:
                                        field_data = data["Total"]
                                        if isinstance(field_data, dict):
                                            total_amount = field_data.get("value", "unknown")
                            
                            # Clean values for filename
                            safe_invoice_number = ''.join(c for c in str(invoice_number) if c.isalnum() or c in '-_.')
                            safe_total_amount = ''.join(c for c in str(total_amount) if c.isalnum() or c in '-_.')
                            
                            # Create CSV data for this document
                            pdf_rows = []
                            for page in doc["pages"]:
                                page_num = page["page"]
                                data = page["data"]
                                extraction_timestamp = page.get("extraction_timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                                
                                # Skip error pages
                                if "error" in data:
                                    continue
                                
                                # Initialize row data
                                row_data = {"Page": page_num, "Extraction_Timestamp": extraction_timestamp}
                                
                                # Process each field
                                for field in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                                             "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                                             "Freight", "Salestax", "Total"]:
                                    field_data = data.get(field, {})
                                    
                                    if isinstance(field_data, dict):
                                        value = field_data.get("value", "N/A")
                                        confidence = field_data.get("confidence", 0)
                                    else:
                                        value = field_data if field_data else "N/A"
                                        confidence = 0
                                    
                                    # Add to row data
                                    row_data[field] = value
                                    row_data[f"{field} Confidence"] = round(confidence * 100, 2)
                                
                                # Check for manual edits
                                edited_fields_with_values = []
                                latest_edit_timestamp = ""
                                original_values = []
                                has_manual_edits = False
                                
                                # Check for edit tracking info from session state
                                if ('manual_edit_tracking' in st.session_state and 
                                    filename in st.session_state.manual_edit_tracking and 
                                    str(page_num) in st.session_state.manual_edit_tracking[filename]):
                                    
                                    # Get the edit tracking info for this page
                                    edit_info = st.session_state.manual_edit_tracking[filename][str(page_num)]
                                    
                                    # Get the most recent edit timestamp
                                    timestamps = []
                                    
                                    for field, info in edit_info.items():
                                        if info.get("edited", False):
                                            has_manual_edits = True
                                            
                                            # Get the current value
                                            current_value = row_data.get(field, "N/A")
                                            
                                            # Add field and value to tracking
                                            edited_fields_with_values.append(f"{field}: {current_value}")
                                            
                                            # Add timestamp to list
                                            if "edit_timestamp" in info:
                                                timestamps.append(info["edit_timestamp"])
                                            
                                            original_values.append(f"{field}: {info.get('previous_value', 'N/A')}")
                                    
                                    # Use the most recent timestamp
                                    if timestamps:
                                        latest_edit_timestamp = max(timestamps)
                                
                                # Add edit tracking columns
                                row_data["Manually_Edited_Fields"] = "; ".join(edited_fields_with_values) if edited_fields_with_values else ""
                                row_data["Edit_Timestamp"] = latest_edit_timestamp
                                row_data["Original_Values"] = "; ".join(original_values) if original_values else ""
                                row_data["Manual_Edit"] = "Y" if has_manual_edits else "N"
                                
                                # Add to rows
                                pdf_rows.append(row_data)
                            
                            # Create CSV using pandas
                            if pdf_rows:
                                pdf_df = pd.DataFrame(pdf_rows, dtype=str)
                                pdf_csv = pdf_df.to_csv(index=False)
                                
                                # Get base filename
                                base_filename = os.path.splitext(filename)[0]
                                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                
                                # Paths for results and source document
                                results_folder = f"{folder_prefix}/processed_results/"
                                source_folder = f"{folder_prefix}/source_documents/"
                                
                                # Upload CSV to results folder
                                csv_blob_name = f"{results_folder}{base_filename}_{safe_invoice_number}_{safe_total_amount}_{timestamp}.csv"
                                csv_success, csv_url = upload_to_blob_storage(
                                    blob_service_client,
                                    "pdf-extraction-results",  # Fixed container name as requested
                                    csv_blob_name,
                                    pdf_csv,
                                    "text/csv"
                                )
                                
                                # Upload/copy source document based on input method
                                source_success = False
                                source_url = None
                                
                                # Get input method from session state
                                input_method = st.session_state.get("input_method", "Unknown")
                                
                                if input_method == "Upload Files" and 'original_files' in st.session_state:
                                    # Find the uploaded file
                                    file_obj = next((f for f in st.session_state.original_files if hasattr(f, 'name') and f.name == filename), None)
                                    
                                    if file_obj:
                                        # Get file position
                                        pos = file_obj.tell()
                                        file_content = file_obj.read()
                                        file_obj.seek(pos)  # Reset position
                                        
                                        # Upload to source document folder
                                        source_blob_name = f"{source_folder}{filename}"
                                        source_success, source_url = upload_to_blob_storage(
                                            blob_service_client,
                                            "pdf-extraction-results",  # Fixed container name
                                            source_blob_name,
                                            file_content,
                                            "application/pdf"
                                        )
                                
                                elif input_method == "Azure Blob Storage" and 'original_files' in st.session_state:
                                    # For blob files, find the blob reference
                                    blob_path = next((b for b in st.session_state.original_files 
                                                     if isinstance(b, str) and b.split('/')[-1] == filename), None)
                                    
                                    if blob_path and 'blob_container' in st.session_state:
                                        # Use the source container name
                                        source_container = st.session_state.blob_container
                                        
                                        try:
                                            # Download blob content
                                            blob_content = download_blob_to_memory(
                                                blob_service_client, 
                                                source_container, 
                                                blob_path
                                            )
                                            
                                            if blob_content:
                                                # Upload to destination
                                                source_blob_name = f"{source_folder}{filename}"
                                                source_success, source_url = upload_to_blob_storage(
                                                    blob_service_client,
                                                    "pdf-extraction-results",  # Fixed container
                                                    source_blob_name,
                                                    blob_content,
                                                    "application/pdf"
                                                )
                                        except Exception as e:
                                            st.warning(f"Error copying source document {filename}: {str(e)}")
                                
                                # Add to processing results
                                processed_results.append({
                                    "Filename": filename,
                                    "CSV": "✅" if csv_success else "❌",
                                    "Source": "✅" if source_success else "❌",
                                    "Status": "Complete" if csv_success and source_success else "Partial"
                                })
                                
                                # Mark as processed in session state
                                if 'processed_docs' not in st.session_state:
                                    st.session_state.processed_docs = {}
                                
                                st.session_state.processed_docs[filename] = csv_success and source_success
                            else:
                                processed_results.append({
                                    "Filename": filename,
                                    "CSV": "❌",
                                    "Source": "❌",
                                    "Status": "No data to process"
                                })
                                
                        except Exception as e:
                            st.error(f"Error processing {doc['filename']}: {str(e)}")
                            processed_results.append({
                                "Filename": doc['filename'],
                                "CSV": "❌",
                                "Source": "❌",
                                "Status": f"Error: {str(e)}"
                            })
                    
                    # Display processing results
                    st.subheader("Processing Results")
                    st.dataframe(pd.DataFrame(processed_results), use_container_width=True)
                    
                    # Show summary
                    successful = sum(1 for result in processed_results if result["Status"] == "Complete")
                    st.success(f"Successfully processed {successful} out of {len(processed_results)} documents")
        else:
            st.info("Select documents to process")
    else:
        st.info(f"No {confidence_selection} documents found")
