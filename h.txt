
def create_formatted_prompt(prompt_template, extraction_fields):
    """
    Format the prompt template with extraction fields.
    
    Args:
        prompt_template: The prompt template string
        extraction_fields: List of fields to extract
    
    Returns:
        str: Formatted prompt
    """
    fields_str = ", ".join(extraction_fields)
    try:
        return prompt_template.format(extraction_fields=fields_str)
    except KeyError as e:
        # Handle cases where prompt template has extra placeholders
        print(f"Warning: KeyError in prompt formatting: {e}")
        print(f"Available placeholders should be: {{extraction_fields}}")
        # Return prompt with basic replacement
        return prompt_template.replace("{extraction_fields}", fields_str)



def process_local_pdf_files(config, api_type, local_folder, doc_type, logger):
    """
    Process PDF files from a local folder.
    
    Parameters:
    - config: Configuration dictionary
    - api_type: 'batch' or 'general'
    - local_folder: Folder path in local filesystem
    - doc_type: Document type ('invoice', 'eob', 'claim', etc.)
    - logger: Logger instance
    """
    # Get document-specific configuration including model config
    extraction_fields, systemprompt, prompt_template, model_config = get_document_config(config, doc_type, api_type)
    logger.info(f"Processing {doc_type} documents with fields: {extraction_fields}")
    logger.info(f"Using prompt module: {config['processing']['document_types'][doc_type]['prompt_module']}")
    
    # Initialize helpers (no archiving for local files)
    logger.info(f"Initializing Azure Storage Helper with output container: {config['azure_storage']['output_container']}")
    storage_helper = AzureStorageHelper(
        config["azure_storage"]["connection_string"],
        config["azure_storage"]["input_container"],
        config["azure_storage"]["output_container"],
        logger=logger
    )
    
    # Pass document type and extraction fields to PDFProcessor
    pdf_processor = PDFProcessor(config, logger, doc_type, extraction_fields)
    
    # Initialize AI client with document-specific model configuration
    logger.info(f"Initializing Azure OpenAI Client with {api_type} API for {doc_type}")
    ai_client = AzureOpenAIClient(model_config, logger)
    
    # Check if folder exists
    folder_path = Path(local_folder)
    if not folder_path.exists() or not folder_path.is_dir():
        logger.error(f"Folder not found: {local_folder}")
        return
    
    # Find all PDF files in the folder
    logger.info(f"Scanning local folder: {local_folder}")
    pdf_files = list(folder_path.glob("*.pdf"))
    
    if not pdf_files:
        logger.warning(f"No PDF files found in folder: {local_folder}")
        return
    
    logger.info(f"Found {len(pdf_files)} PDF files to process")
    
    # Track processed and unprocessed files
    processed_files = []
    unprocessed_files = []
    
    # Process each PDF (continue with your existing local processing logic, but update prompts section)
    # ... rest of the function remains the same but replace prompt creation with:
    
    # Create formatted prompts using the document-specific prompt template
    formatted_prompt = create_formatted_prompt(prompt_template, extraction_fields)
    prompts = [formatted_prompt for _ in range(len(batch_pages))]
    
    # And update AI client calls with systemprompt:
    if api_type == "batch":
        raw_results = ai_client.process_batch(base64_strings, prompts, systemprompt)
    else:
        raw_results = ai_client.process_general(base64_strings, prompts, systemprompt)
