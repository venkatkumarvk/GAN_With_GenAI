{
  "azure_openai": {
    "api_version": "2023-12-01-preview",
    "default": {
      "api_key": "your-default-api-key",
      "azure_endpoint": "https://your-default-endpoint.openai.azure.com/",
      "deployment_name": "your-default-deployment-name"
    },
    "models": {
      "invoice": {
        "api_key": "your-invoice-api-key",
        "azure_endpoint": "https://your-invoice-endpoint.openai.azure.com/",
        "deployment_name": "gpt-4-vision-invoice"
      },
      "eob": {
        "api_key": "your-eob-api-key", 
        "azure_endpoint": "https://your-eob-endpoint.openai.azure.com/",
        "deployment_name": "gpt-4-vision-eob"
      },
      "claim": {
        "api_key": "your-claim-api-key",
        "azure_endpoint": "https://your-claim-endpoint.openai.azure.com/",
        "deployment_name": "gpt-4-vision-claim"
      }
    }
  },
  "azure_storage": {
    "connection_string": "your-connection-string",
    "input_container": "input-pdfs",
    "output_container": "processed-results",
    "input_archive_container": "archived-inputs",
    "high_confidence_folder": "high_confidence/",
    "low_confidence_folder": "low_confidence/"
  },
  "processing": {
    "batch_size": 10,
    "confidence_threshold": 80,
    "zoom_factor": 2.0,
    "timeout_seconds": 300,
    "document_types": {
      "invoice": {
        "extraction_fields": ["invoice_number", "total_amount", "date", "vendor"],
        "prompt_module": "invoice_prompt"
      },
      "eob": {
        "extraction_fields": ["eob_number", "patient_name", "service_date", "paid_amount", "provider"],
        "prompt_module": "eob_prompt"
      },
      "claim": {
        "extraction_fields": ["claim_number", "patient_id", "diagnosis_code", "procedure_code", "claim_amount"],
        "prompt_module": "claim_prompt",
        "overlay_enabled": true,
        "overlay_background_pdf": "background.pdf"
      }
    }
  },
  "archive": {
    "blob_input_move_on": true,
    "archive_name_format": "archive_{timestamp}.zip",
    "processed_folder": "processed/",
    "unprocessed_folder": "unprocessed/"
  }
}


-------

  # Add these imports to the top of helper.py
import fitz  # PyMuPDF
import cv2
import numpy as np
from PIL import Image
from io import BytesIO

# Add these functions to your helper.py file

def pdf_to_image_from_bytes(pdf_bytes, width=None, height=None, dpi=300):
    """Convert PDF bytes to image array."""
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    if len(doc) == 0:
        raise ValueError("No pages found in PDF")

    page = doc.load_page(0)  # first page
    pix = page.get_pixmap(dpi=dpi)

    img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.height, pix.width, pix.n)
    if pix.n == 4:
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

    # Resize if width/height specified
    if width and height:
        img = cv2.resize(img, (width, height))

    doc.close()
    return img

def remove_white_background(img):
    """Remove white background from image (make it transparent)."""
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, alpha = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY_INV)
    b, g, r = cv2.split(img)
    rgba = cv2.merge([b, g, r, alpha])
    return rgba

def overlay_transparent(background, overlay_rgba):
    """Overlay transparent image onto background."""
    overlay_rgb = overlay_rgba[:, :, :3]
    alpha = overlay_rgba[:, :, 3] / 255.0
    alpha = np.stack([alpha] * 3, axis=-1)

    blended = (overlay_rgb * alpha + background * (1 - alpha)).astype(np.uint8)
    return blended

def create_overlay_pdf(original_pdf_bytes, background_pdf_path, logger):
    """
    Create overlay PDF by combining original PDF with background.
    
    Args:
        original_pdf_bytes: Bytes of the original PDF (filled form)
        background_pdf_path: Path to the background PDF file
        logger: Logger instance
    
    Returns:
        bytes: Overlayed PDF as bytes
    """
    try:
        logger.debug("Creating overlay PDF")
        
        # Check if background file exists
        if not os.path.exists(background_pdf_path):
            logger.warning(f"Background PDF not found: {background_pdf_path}")
            return original_pdf_bytes
        
        # Load background PDF
        with open(background_pdf_path, 'rb') as f:
            background_bytes = f.read()
        
        # First, get background size
        bg_img_temp = pdf_to_image_from_bytes(background_bytes)
        h, w = bg_img_temp.shape[:2]
        
        # Convert both PDFs to the same size
        bg_img = pdf_to_image_from_bytes(background_bytes, width=w, height=h)
        overlay_img = pdf_to_image_from_bytes(original_pdf_bytes, width=w, height=h)
        
        # Create transparent overlay
        overlay_rgba = remove_white_background(overlay_img)
        
        # Overlay images
        final_img = overlay_transparent(bg_img, overlay_rgba)
        
        # Convert back to PDF bytes
        final_image_pil = Image.fromarray(final_img)
        pdf_buffer = BytesIO()
        final_image_pil.save(pdf_buffer, format="PDF", resolution=300.0)
        pdf_buffer.seek(0)
        
        logger.debug("Successfully created overlay PDF")
        return pdf_buffer.getvalue()
        
    except Exception as e:
        logger.error(f"Error creating overlay PDF: {str(e)}")
        return original_pdf_bytes  # Return original if overlay fails

-----

  def get_document_config(config, doc_type):
    """
    Get configuration for a specific document type including model and overlay configuration.
    
    Args:
        config: Full configuration dictionary
        doc_type: Document type ('invoice', 'eob', 'claim')
    
    Returns:
        tuple: (extraction_fields, systemprompt, prompt_template, model_config, overlay_config)
    """
    document_types = config["processing"]["document_types"]
    
    if doc_type not in document_types:
        raise ValueError(f"Unsupported document type: {doc_type}. Available types: {list(document_types.keys())}")
    
    doc_config = document_types[doc_type]
    extraction_fields = doc_config["extraction_fields"]
    prompt_module_name = doc_config["prompt_module"]
    
    # Get overlay configuration
    overlay_config = {
        "enabled": doc_config.get("overlay_enabled", False),
        "background_pdf": doc_config.get("overlay_background_pdf", "")
    }
    
    # Get model configuration for this document type
    azure_openai_config = config["azure_openai"]
    api_version = azure_openai_config["api_version"]
    
    # Check if document type has specific model configuration
    if doc_type in azure_openai_config.get("models", {}):
        model_config = azure_openai_config["models"][doc_type].copy()
        model_config["api_version"] = api_version
    else:
        # Use default configuration
        default_config = azure_openai_config.get("default", {})
        model_config = default_config.copy()
        model_config["api_version"] = api_version
    
    # Dynamically import the prompt module
    try:
        prompt_module = importlib.import_module(prompt_module_name)
        
        # Get systemprompt and prompt from the module
        if not hasattr(prompt_module, 'systemprompt'):
            raise AttributeError(f"Module '{prompt_module_name}' missing 'systemprompt' variable")
        if not hasattr(prompt_module, 'prompt'):
            raise AttributeError(f"Module '{prompt_module_name}' missing 'prompt' variable")
            
        systemprompt = prompt_module.systemprompt
        prompt_template = prompt_module.prompt
        
    except ImportError as e:
        raise ImportError(f"Could not import prompt module '{prompt_module_name}': {str(e)}")
    except AttributeError as e:
        raise AttributeError(f"Error accessing prompt variables: {str(e)}")
    
    return extraction_fields, systemprompt, prompt_template, model_config, overlay_config


  -----

  # Update the beginning of process_azure_pdf_files function:

def process_azure_pdf_files(config, api_type, azure_folder, doc_type, logger):
    """
    Process PDF files from Azure Blob Storage with archiving and overlay support.
    
    Parameters:
    - config: Configuration dictionary
    - api_type: 'batch' or 'general'
    - azure_folder: Folder path in Azure Blob Storage
    - doc_type: Document type ('invoice', 'eob', 'claim')
    - logger: Logger instance
    """
    # Get document-specific configuration including model and overlay config
    extraction_fields, systemprompt, prompt_template, model_config, overlay_config = get_document_config(config, doc_type)
    logger.info(f"Processing {doc_type} documents with fields: {extraction_fields}")
    logger.info(f"Using prompt module: {config['processing']['document_types'][doc_type]['prompt_module']}")
    logger.info(f"Using Azure OpenAI model configuration:")
    logger.info(f"  Endpoint: {model_config.get('azure_endpoint')}")
    logger.info(f"  Deployment: {model_config.get('deployment_name')}")
    logger.info(f"  API Version: {model_config.get('api_version')}")
    
    # Log overlay configuration
    if overlay_config["enabled"]:
        logger.info(f"Overlay processing enabled for {doc_type}")
        logger.info(f"  Background PDF: {overlay_config['background_pdf']}")
    else:
        logger.info(f"Overlay processing disabled for {doc_type}")
    
    # ... rest of your existing initialization code ...


--------
  # In your main processing loop, find this section:

# Download blob to memory
logger.debug(f"Downloading blob: {blob_name}")
blob_content = storage_helper.download_blob_to_memory(blob_name)

if blob_content is None:
    logger.error(f"Could not download blob: {blob_name}")
    unprocessed_files.append(blob_name)
    continue

# ADD THIS NEW SECTION AFTER DOWNLOADING:
# Apply overlay if enabled for this document type
processed_blob_content = blob_content
if overlay_config["enabled"]:
    logger.info(f"Applying overlay to {filename}")
    processed_blob_content = create_overlay_pdf(
        blob_content, 
        overlay_config["background_pdf"], 
        logger
    )

# Extract pages as base64 strings
filename = blob_name.split('/')[-1]
logger.info(f"Extracting pages from {filename}")

# CHANGE THIS LINE:
# pages = pdf_processor.extract_pdf_pages(blob_content)
# TO:
pages = pdf_processor.extract_pdf_pages(processed_blob_content)

  -----
  # In your main() function, update the argument parser:

def main():
    parser = argparse.ArgumentParser(description="Process PDF files using Azure OpenAI with document type and overlay support")
    parser.add_argument("--apitype", choices=["general", "batch"], required=True, 
                      help="API type to use (general or batch)")
    parser.add_argument("--source", choices=["azure", "local"], required=True,
                      help="Source location of PDF files (azure or local)")
    parser.add_argument("--folder", required=True, 
                      help="Folder path (in Azure Blob Storage or local filesystem)")
    parser.add_argument("--doctype", choices=["invoice", "eob", "claim"], required=True,
                      help="Document type to process (invoice, eob, or claim)")
    parser.add_argument("--config", default="config.json", 
                      help="Path to configuration file")
    parser.add_argument("--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                     default="INFO", help="Set the logging level")
    parser.add_argument("--no-archive", action="store_true",
                     help="Disable archiving regardless of config setting")
    # ADD THIS NEW ARGUMENT:
    parser.add_argument("--claim-overlay", action="store_true",
                     help="Force enable overlay processing for claim documents")
    parser.add_argument("--no-claim-overlay", action="store_true", 
                     help="Force disable overlay processing for claim documents")
  ----------------------
  # In your main() function, after loading config and before validation:

# Load configuration
config = load_config(args.config)

# Override overlay setting if command line arguments are specified
if args.claim_overlay and args.doctype == "claim":
    if "claim" in config["processing"]["document_types"]:
        config["processing"]["document_types"]["claim"]["overlay_enabled"] = True
        logger.info("Overlay processing force enabled via --claim-overlay")

if args.no_claim_overlay and args.doctype == "claim":
    if "claim" in config["processing"]["document_types"]:
        config["processing"]["document_types"]["claim"]["overlay_enabled"] = False
        logger.info("Overlay processing force disabled via --no-claim-overlay")

# Validate document type exists in config
if args.doctype not in config["processing"]["document_types"]:
    available_types = list(config["processing"]["document_types"].keys())
    raise ValueError(f"Document type '{args.doctype}' not found in config. Available types: {available_types}")
