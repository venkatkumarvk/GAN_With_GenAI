import json
from schema_helper import DatabricksSchemaGenerator
from insert_helper import InsertSQLGenerator

def main():
    try:
        # Load config
        with open("schema_config.json", 'r') as f:
            config = json.load(f)

        # Run schema generation
        print("üõ†Ô∏è Generating SCHEMA (CREATE + DROP)...")
        schema_gen = DatabricksSchemaGenerator(
            excel_file_path=config["excel_file_path"],
            output_base_folder=config.get("output_base_folder", "generated_schemas"),
            sheet_name=config.get("sheet_name"),
            categories=config["categories"],
            generate_drop_statements=config.get("generate_drop_statements", False)
        )
        schema_gen.run()

        # Run insert generation
        print("\nüì• Generating INSERT statements...")
        insert_gen = InsertSQLGenerator(
            excel_file_path=config["excel_file_path"],
            output_folder="generated_inserts",
            sheet_name=config.get("sheet_name"),
            categories=config["categories"]
        )
        insert_gen.run()

        print("\n‚úÖ All tasks completed successfully!")

    except FileNotFoundError:
        print("‚ùå Error: schema_config.json not found.")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()


--
{
  "excel_file_path": "your_excel_file.xlsx",
  "sheet_name": "Sheet1",
  "output_base_folder": "generated_schemas",
  "generate_drop_statements": true,
  "categories": {
    "Original_SSR": {
      "schema_col": "Original SSR - Schema",
      "table_col": "Original SSR - Physical Table Name",
      "column_col": "Original SSR - Physical Column Name",
      "datatype_col": "Original SSR - Data Type",
      "column_comment_col": "Original SSR - Column Definition",
      "table_comment_col": "Original SSR - Table Definition"
    },
    "EDL": {
      "schema_col": "EDL- Schema",
      "table_col": "EDL - Physical Table Name",
      "column_col": "EDL - Physical Column Name",
      "datatype_col": "EDL - Data Type",
      "column_comment_col": "EDL - Column Definition",
      "table_comment_col": "EDL - Table Definition"
    },
    "RDMOF": {
      "schema_col": "RDMOF - Schema",
      "table_col": "RDMOF - Physical Table Name",
      "column_col": "RDMOF - Physical Column Name",
      "datatype_col": "RDMOF - Data Type",
      "column_comment_col": "RDMOF - Column Definition",
      "table_comment_col": "RDMOF - Table Definition"
    }
  }
}
