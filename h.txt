# logger_helpers.py
import pyodbc

def log_file_status_begin(filename, source_path, target_path, archive_path, status_desc, config):
    """
    Inserts a BEGIN status log for a file and returns the generated DocumentProcessor_Key.
    """
    try:
        conn_str = config["sql_server"]["connection_string"]
        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        result = cur.execute(
            "{CALL dbo.uspXUpdateDocumentProcessor (?, ?, ?, ?, ?, ?, ?)}",
            None, filename, source_path, target_path, archive_path, "BEGIN", status_desc
        ).fetchone()

        document_id = result[0] if result else None

        cur.close()
        conn.close()

        print(f"[BEGIN] DocumentProcessor_Key = {document_id}")
        return document_id

    except Exception as e:
        print(f"[SQL LOGGING ERROR - BEGIN] {e}")
        return None


def log_file_status_update(document_id, filename, source_path, target_path, archive_path, status, status_desc, config):
    """
    Updates the file's status in the SQL log using the DocumentProcessor_Key.
    """
    if not document_id:
        print("[SQL UPDATE ERROR] document_id is missing")
        return False

    try:
        conn_str = config["sql_server"]["connection_string"]
        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        cur.execute(
            "{CALL dbo.uspXUpdateDocumentProcessor (?, ?, ?, ?, ?, ?, ?)}",
            document_id, filename, source_path, target_path, archive_path, status, status_desc
        )

        conn.commit()
        cur.close()
        conn.close()

        print(f"[UPDATE] document_id {document_id} set to status {status}")
        return True

    except Exception as e:
        print(f"[SQL LOGGING ERROR - UPDATE] {e}")
        return False
