import os
import json
import pandas as pd
import re
from typing import List, Dict, Tuple, Optional
from collections import defaultdict

def load_config_from_file(config_file: str) -> Dict:
    try:
        with open(config_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading config file: {e}")
        return {}

class DatabricksSchemaGenerator:
    def __init__(self,
                 excel_file_path: str,
                 output_base_folder: str = "generated_schemas",
                 sheet_name: Optional[str] = None,
                 categories: Optional[Dict[str, Dict[str, str]]] = None):
        self.excel_file_path = excel_file_path
        self.output_base_folder = output_base_folder
        self.sheet_name = sheet_name
        self.categories_config = categories or {}
        self.tables_created = 0

    def map_datatype(self, datatype: str) -> str:
        if pd.isna(datatype) or not datatype or str(datatype).strip() == '':
            return 'VARCHAR(255)'
        dtype = str(datatype).upper().strip()

        if m := re.match(r'VARCHAR2\((\d+)\s*BYTE\)', dtype):
            return f'VARCHAR({m.group(1)})'
        if m := re.match(r'VARCHAR2\((\d+)\)', dtype):
            return f'VARCHAR({m.group(1)})'
        if m := re.match(r'NUMBER\((\d+),\s*(\d+)\)', dtype):
            return f'DECIMAL({m.group(1)},{m.group(2)})'
        if m := re.match(r'NUMBER\((\d+)\)', dtype):
            return 'INT' if int(m.group(1)) <= 10 else 'BIGINT'
        if 'TIMESTAMP' in dtype:
            return 'TIMESTAMP'
        if 'DATE' in dtype:
            return 'DATE'
        if 'CHAR' in dtype:
            return 'VARCHAR(1)'
        if 'CLOB' in dtype:
            return 'STRING'
        if 'BLOB' in dtype:
            return 'BINARY'
        return 'VARCHAR(255)'

    def load_excel_data(self) -> pd.DataFrame:
        try:
            df = pd.read_excel(self.excel_file_path, sheet_name=self.sheet_name)
            
            # Print column names for debugging
            print("Available columns in Excel:")
            for col in df.columns:
                print(f"  - '{col}'")
            
            # Clean column names (remove extra spaces)
            df.columns = df.columns.str.strip()
            
            # Forward-fill missing schema/table names for each category
            for cat, cfg in self.categories_config.items():
                schema_col = cfg.get("schema_col")
                table_col = cfg.get("table_col")
                
                if schema_col and schema_col in df.columns:
                    df[schema_col] = df[schema_col].ffill()
                if table_col and table_col in df.columns:
                    df[table_col] = df[table_col].ffill()

            # Drop rows where any schema column is 'NA' or empty
            for cfg in self.categories_config.values():
                schema_col = cfg.get("schema_col")
                if schema_col and schema_col in df.columns:
                    df = df[
                        (df[schema_col].notna()) & 
                        (df[schema_col].astype(str).str.upper() != "NA") &
                        (df[schema_col].astype(str).str.strip() != "")
                    ]

            return df

        except Exception as e:
            print(f"Error loading Excel file: {e}")
            return pd.DataFrame()

    def extract_tables(self, df: pd.DataFrame) -> Dict[str, Dict[Tuple[str, str], List[Tuple[str, str]]]]:
        result = {}
        
        for cat, cfg in self.categories_config.items():
            schema_col = cfg.get('schema_col')
            table_col = cfg.get('table_col')
            column_col = cfg.get('column_col')
            datatype_col = cfg.get('datatype_col', '')

            print(f"\nProcessing category: {cat}")
            print(f"  Schema column: {schema_col}")
            print(f"  Table column: {table_col}")
            print(f"  Column column: {column_col}")
            print(f"  Datatype column: {datatype_col}")

            # Check if required columns exist
            missing_cols = []
            for col_name, col_val in [('schema_col', schema_col), ('table_col', table_col), ('column_col', column_col)]:
                if not col_val or col_val not in df.columns:
                    missing_cols.append(f"{col_name}: {col_val}")
            
            if missing_cols:
                print(f"  WARNING: Missing columns for {cat}: {missing_cols}")
                result[cat] = {}
                continue

            tables = defaultdict(list)
            seen = defaultdict(set)

            # Filter rows that have valid data for this category
            category_filter = (
                df[schema_col].notna() & 
                df[table_col].notna() & 
                df[column_col].notna() &
                (df[schema_col].astype(str).str.strip() != '') &
                (df[table_col].astype(str).str.strip() != '') &
                (df[column_col].astype(str).str.strip() != '')
            )
            
            filtered_df = df[category_filter]
            print(f"  Found {len(filtered_df)} valid rows for {cat}")

            for _, row in filtered_df.iterrows():
                schema = str(row[schema_col]).strip()
                table = str(row[table_col]).strip()
                column = str(row[column_col]).strip()
                
                # Handle datatype column (might not exist for all categories)
                if datatype_col and datatype_col in df.columns:
                    dtype_val = row.get(datatype_col, '')
                else:
                    dtype_val = ''

                # Skip if any required field is empty
                if not schema or not table or not column:
                    continue

                # Check for duplicates (case-insensitive)
                if column.lower() not in seen[(schema, table)]:
                    dtype = self.map_datatype(dtype_val) if dtype_val else 'VARCHAR(255)'
                    tables[(schema, table)].append((column, dtype))
                    seen[(schema, table)].add(column.lower())

            print(f"  Extracted {len(tables)} tables for {cat}")
            for (schema, table), cols in tables.items():
                print(f"    {schema}.{table}: {len(cols)} columns")

            result[cat] = tables

        return result

    def generate_schema_sql(self, schema: str, table: str, columns: List[Tuple[str, str]], category: str) -> str:
        sql = f"-- {category} - {table} Table Schema\n"
        sql += f"CREATE TABLE IF NOT EXISTS external_catalog.{schema}.{table} (\n"
        sql += ",\n".join([f"    [{col}] {dtype}" for col, dtype in columns])
        sql += "\n);"
        return sql

    def create_folder_structure(self):
        folders = list(self.categories_config.keys()) + ["consolidated"]
        os.makedirs(self.output_base_folder, exist_ok=True)
        for folder in folders:
            os.makedirs(os.path.join(self.output_base_folder, folder), exist_ok=True)

    def generate_category_consolidated_schema(self, category: str, tables: Dict[Tuple[str, str], List[Tuple[str, str]]]) -> str:
        sql = f"-- {category} CATEGORY - CONSOLIDATED SCHEMA\n\n"
        count = 0
        for (schema, table), cols in tables.items():
            if cols:
                sql += self.generate_schema_sql(schema, table, cols, category) + "\n\n"
                count += 1
        sql += f"-- Total tables in {category} consolidated schema: {count}\n"
        return sql, count

    def generate_master_consolidated_schema(self, all_tables: Dict[str, Dict[Tuple[str, str], List[Tuple[str, str]]]]) -> str:
        sql = "-- MASTER CONSOLIDATED SCHEMA\n\n"
        total = 0
        for cat, tables in all_tables.items():
            if tables:  # Only add category if it has tables
                sql += f"-- {cat} CATEGORY\n\n"
                for (schema, table), cols in tables.items():
                    if cols:
                        sql += self.generate_schema_sql(schema, table, cols, cat) + "\n\n"
                        total += 1
        sql += f"-- Total tables in master consolidated schema: {total}\n"
        return sql

    def run(self):
        df = self.load_excel_data()
        if df.empty:
            print("No data loaded.")
            return

        print(f"Loaded {len(df)} rows from Excel file")
        
        self.create_folder_structure()
        all_tables = self.extract_tables(df)
        total_tables = 0

        for cat, tables in all_tables.items():
            folder = os.path.join(self.output_base_folder, cat)
            count = 0
            
            for (schema, table), cols in tables.items():
                if cols:
                    sql = self.generate_schema_sql(schema, table, cols, cat)
                    filename = f"{schema}_{table}.sql".lower()
                    with open(os.path.join(folder, filename), "w") as f:
                        f.write(sql)
                    count += 1

            # Generate consolidated schema for this category
            if tables:
                consolidated_sql, cat_count = self.generate_category_consolidated_schema(cat, tables)
                with open(os.path.join(folder, f"{cat.lower()}_consolidated_{cat_count}.sql"), "w") as f:
                    f.write(consolidated_sql)
                print(f"Created {count} individual table files and 1 consolidated file for {cat}")
            else:
                print(f"No tables found for category: {cat}")

            total_tables += count

        # Generate master consolidated schema
        master_sql = self.generate_master_consolidated_schema(all_tables)
        with open(os.path.join(self.output_base_folder, "consolidated", "all_tables_master_consolidated.sql"), "w") as f:
            f.write(master_sql)

        print(f"\nTotal tables created: {total_tables}")
        print(f"Files generated in: {self.output_base_folder}")
