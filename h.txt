import pyodbc

def log_file_status_begin(filename, source_path, target_path, archive_path, status_desc, config):
    """
    Inserts BEGIN row and retrieves inserted ID using output param.
    """
    try:
        conn_str = config["sql_server"]["connection_string"]
        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        # Declare variables
        document_id = None
        return_flag = 1  # flag to return inserted ID

        # Create output parameter
        output_id = cur.execute(
            """
            DECLARE @OutputID BIGINT;
            EXEC [dbo].[uspXUpdateDocumentProcessor]
                @documentProcessorKey = NULL,
                @fileName = ?,
                @sourceFilePath = ?,
                @targetFilePath = ?,
                @archiveFilePath = ?,
                @status = ?,
                @statusDesc = ?,
                @returnDocumentProcessorKeyFlag = ?,
                @documentProcessorKeyOut = @OutputID OUTPUT;
            SELECT @OutputID;
            """,
            filename,
            source_path,
            target_path,
            archive_path,
            "BEGIN",
            status_desc,
            return_flag
        ).fetchone()

        document_id = output_id[0] if output_id else None

        cur.close()
        conn.close()
        return document_id

    except Exception as e:
        print(f"[SQL LOGGING ERROR - BEGIN] {e}")
        return None


def log_file_status_update(document_id, filename, source_path, target_path, archive_path, status, status_desc, config):
    """
    Updates the same row in SQL using existing ID.
    """
    if not document_id:
        print("[SQL UPDATE ERROR] document_id is missing")
        return False

    try:
        conn_str = config["sql_server"]["connection_string"]
        conn = pyodbc.connect(conn_str)
        cur = conn.cursor()

        return_flag = 0  # don't return a new ID on update

        cur.execute(
            """
            DECLARE @DummyOut BIGINT;
            EXEC [dbo].[uspXUpdateDocumentProcessor]
                @documentProcessorKey = ?,
                @fileName = ?,
                @sourceFilePath = ?,
                @targetFilePath = ?,
                @archiveFilePath = ?,
                @status = ?,
                @statusDesc = ?,
                @returnDocumentProcessorKeyFlag = ?,
                @documentProcessorKeyOut = @DummyOut OUTPUT;
            """,
            document_id,
            filename,
            source_path,
            target_path,
            archive_path,
            status,
            status_desc,
            return_flag
        )

        conn.commit()
        cur.close()
        conn.close()
        return True

    except Exception as e:
        print(f"[SQL LOGGING ERROR - UPDATE] {e}")
        return False
