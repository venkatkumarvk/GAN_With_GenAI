def main():
    st.set_page_config(
        page_title="PDF Financial Data Extractor",
        page_icon="📊",
        layout="wide"
    )
    
    st.title("PDF Financial Data Extractor")
    st.subheader("Extract invoice data from PDF files")
    
    # Check if Azure OpenAI credentials are available
    if not all([aoai_endpoint, aoai_api_key, aoai_deployment_name]):
        st.error("Azure OpenAI credentials are missing. Please set AOAI_ENDPOINT, AOAI_API_KEY, and AOAI_DEPLOYMENT environment variables.")
        return
    
    # Check if Azure Blob Storage credentials are available
    if not azure_storage_connection_string:
        st.warning("Azure Blob Storage connection string is missing. Some features will be disabled. Please set AZURE_STORAGE_CONNECTION_STRING environment variable.")
    
    # Initialize the clients
    client = get_client()
    blob_service_client = get_blob_service_client() if azure_storage_connection_string else None
    
    # Advanced settings in an expandable section
    with st.expander("Advanced Settings"):
        prompt = st.text_area(
            "Extraction Prompt", 
            """Based on this image, extract the following information from the invoice:   
            1) What is the vendor name?
            2) What is the invoice number?
            3) What is the invoice date?
            4) What is the customer name?
            5) What is the purchase order number?
            6) What is the stock code?
            7) What is the unit price?
            8) What is the invoice amount?
            9) What is the freight cost?
            10) What is the sales tax?
            11) What is the total amount?""",
            help="Customize the prompt sent to Azure OpenAI Vision to extract information"
        )
    
    # Input method selection
    input_method = st.radio(
        "Select Input Method",
        ["Upload Files", "Azure Blob Storage"],
        help="Choose how to input PDF files for processing"
    )
    
    if input_method == "Upload Files":
        # File uploader
        uploaded_files = st.file_uploader(
            "Upload PDF files", 
            type="pdf", 
            accept_multiple_files=True,
            help="Upload one or more PDF files containing financial statements"
        )
        
        # Process button
        process_button = st.button("Process Documents", type="primary")
        
        if process_button and not uploaded_files:
            st.warning("Please upload at least one PDF file.")
            return
            
        files_to_process = uploaded_files if process_button else None
    
    else:  # Azure Blob Storage
        if not blob_service_client:
            st.error("Azure Blob Storage connection is required for this option. Please set AZURE_STORAGE_CONNECTION_STRING environment variable.")
            return
        
        # Get available containers
        containers = get_blob_containers(blob_service_client)
        
        if not containers:
            st.error("No containers found in the Azure Blob Storage account. Please create at least one container.")
            return
        
        # Container selection
        selected_container = st.selectbox(
            "Select Container",
            containers,
            help="Choose an Azure Blob Storage container"
        )
        
        # Get folders in the selected container
        folders = get_blob_folders(blob_service_client, selected_container)
        
        # Folder selection
        selected_folder = st.selectbox(
            "Select Folder",
            folders,
            format_func=lambda x: "Root (No Folder)" if x == "" else x,
            help="Choose a folder within the container"
        )
        
        # List available PDFs
        pdf_blobs = list_pdf_blobs(blob_service_client, selected_container, selected_folder)
        
        if not pdf_blobs:
            st.warning(f"No PDF files found in the selected location. Please choose another container or folder.")
            return
        
        # Show available PDFs
        st.write(f"Found {len(pdf_blobs)} PDF files:")
        
        # Create columns for better display
        pdf_cols = st.columns(3)
        for i, pdf in enumerate(pdf_blobs):
            display_name = pdf.split('/')[-1]  # Remove folder path for display
            pdf_cols[i % 3].write(f"- {display_name}")
            if i >= 11:  # Limit display to avoid cluttering
                pdf_cols[(i + 1) % 3].write("...")
                break
        
        # Process button
        process_button = st.button("Process Blob Documents", type="primary")
        
        files_to_process = pdf_blobs if process_button else None
    
    # Process files if requested
    if files_to_process:
        with st.spinner("Processing documents..."):
            # Create a container for the whole processing section
            processing_container = st.container()
            
            with processing_container:
                # Store all PDF results
                all_pdf_results = []
                
                # Create a timestamp for the filename
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                # Process the PDFs based on input method
                if input_method == "Upload Files":
                    # Process uploaded PDFs
                    progress_bar = st.progress(0)
                    progress_text = st.empty()
                    
                    # Process each uploaded PDF
                    for i, pdf_file in enumerate(files_to_process):
                        progress_text.text(f"Processing file {i+1}/{len(files_to_process)}: {pdf_file.name}")
                        
                        # Process the PDF and get results
                        pdf_result = process_pdf(
                            pdf_file, 
                            prompt, 
                            client, 
                            aoai_deployment_name,
                            progress_bar,
                            progress_text
                        )
                        
                        # Add to our collection of all PDF results
                        all_pdf_results.append(pdf_result)
                        
                        # Update overall progress
                        progress_bar.progress((i + 1) / len(files_to_process))
                        
                    progress_text.text("Processing complete!")
                    progress_bar.progress(1.0)
                else:
                    # Process PDFs from Blob Storage
                    all_pdf_results = process_blob_pdfs(
                        blob_service_client,
                        selected_container,
                        files_to_process,
                        prompt,
                        client,
                        aoai_deployment_name
                    )
                
                # Save individual text files for each PDF and upload to Azure Blob Storage
                blob_upload_results = []
                text_files_info = []
                
                if blob_service_client:
                    result_upload_container = st.text_input(
                        "Output Container Name",
                        value=azure_storage_container_name,
                        help="Container where results will be uploaded (will be created if doesn't exist)"
                    )
                    
                    st.info(f"Uploading results to Azure Blob Storage container: {result_upload_container}")
                    
                    for pdf_result in all_pdf_results:
                        filename = pdf_result["filename"]
                        base_filename = os.path.splitext(filename)[0]
                        
                        # Create the text content with key-value pairs
                        page_results_text = create_page_results_text(pdf_result)
                        
                        # Create timestamp filename
                        timestamp_filename = f"{base_filename}_{timestamp}"
                        
                        # Upload text file to blob storage
                        text_blob_name = f"{timestamp_filename}.txt"
                        text_success, text_url = upload_to_blob_storage(
                            blob_service_client,
                            result_upload_container,
                            text_blob_name,
                            page_results_text,
                            "text/plain"
                        )
                        
                        # Upload JSON to blob storage
                        json_blob_name = f"{timestamp_filename}.json"
                        pdf_json = json.dumps(pdf_result, ensure_ascii=False, indent=2)
                        json_success, json_url = upload_to_blob_storage(
                            blob_service_client,
                            result_upload_container,
                            json_blob_name,
                            pdf_json,
                            "application/json"
                        )
                        
                        # Store results
                        blob_upload_results.append({
                            "filename": filename,
                            "text_success": text_success,
                            "text_url": text_url if text_success else None,
                            "json_success": json_success,
                            "json_url": json_url if json_success else None
                        })
                        
                        # Store text file info for display
                        text_files_info.append({
                            "filename": filename,
                            "text_content": page_results_text,
                            "timestamp_filename": timestamp_filename
                        })
                
                # 1. Display extraction results
                st.subheader("1. Extraction Results")
                
                # Create a DataFrame view
                if all_pdf_results:
                    try:
                        results_df = create_results_dataframe(all_pdf_results)
                        
                        if not results_df.empty:
                            st.dataframe(results_df, use_container_width=True)
                        else:
                            st.warning("Could not create results table due to data format issues.")
                            
                    except Exception as e:
                        st.error(f"Error displaying results table: {e}")
                        st.info("Continuing with other outputs despite table display error.")
                    
                    # Create zip file with text extractions
                    text_zip = create_text_files_zip(all_pdf_results)
                    
                    # 2. Display extracted key-value pairs
                    st.subheader("2. Extracted Key-Value Pairs")
                    
                    # Create tabs for each PDF
                    if len(all_pdf_results) > 0:
                        pdf_tabs = st.tabs([pdf_result["filename"] for pdf_result in all_pdf_results])
                        
                        for i, tab in enumerate(pdf_tabs):
                            with tab:
                                pdf_result = all_pdf_results[i]
                                filename = pdf_result["filename"]
                                base_filename = os.path.splitext(filename)[0]
                                
                                # Generate or retrieve page results text
                                if text_files_info:
                                    page_results_text = next((info["text_content"] for info in text_files_info if info["filename"] == filename), "")
                                    timestamp_filename = next((info["timestamp_filename"] for info in text_files_info if info["filename"] == filename), "")
                                else:
                                    page_results_text = create_page_results_text(pdf_result)
                                    timestamp_filename = f"{base_filename}_{timestamp}"
                                
                                # Display the key-value page results
                                st.text_area(
                                    f"Extracted Data for {filename}",
                                    value=page_results_text,
                                    height=300,
                                    disabled=True
                                )
                    
                    # 3. Run evaluation and display results in table format
                    evaluation_results = evaluate_extraction_results(all_pdf_results)
                    st.subheader("3. Evaluation Results")
                    
                    # Create table of confidence levels by document
                    confidence_by_document = {}
                    
                    for pdf_result in all_pdf_results:
                        filename = pdf_result["filename"]
                        confidence_by_document[filename] = {
                            "high": 0,  # 90-100%
                            "low": 0    # <90%
                        }
                        
                        # Count fields in each confidence range for this document
                        for page in pdf_result["pages"]:
                            data = page["data"]
                            
                            if "error" in data:
                                continue
                                
                            for field in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                                        "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                                        "Freight", "Salestax", "Total"]:
                                field_data = data.get(field, {})
                                
                                if isinstance(field_data, dict) and "confidence" in field_data:
                                    confidence = field_data.get("confidence", 0) * 100
                                    
                                    if confidence >= 90:
                                        confidence_by_document[filename]["high"] += 1
                                    else:
                                        confidence_by_document[filename]["low"] += 1
                    
                    # Create table data with just high and low categories
                    doc_table_data = {
                        "Document": [],
                        "High Confidence (90-100%)": [],
                        "Low Confidence (<90%)": []
                    }
                    
                    for filename, counts in confidence_by_document.items():
                        doc_table_data["Document"].append(filename)
                        doc_table_data["High Confidence (90-100%)"].append(counts["high"])
                        doc_table_data["Low Confidence (<90%)"].append(counts["low"])
                    
                    # Display the document confidence table
                    doc_confidence_df = pd.DataFrame(doc_table_data)
                    st.dataframe(doc_confidence_df, use_container_width=True)
                    
                    # 4. Documents that need manual verification
                    st.subheader("4. Documents Needing Manual Verification")
                    
                    # Get documents with fields in low confidence range
                    docs_to_verify = []
                    
                    for filename, counts in confidence_by_document.items():
                        if counts["low"] > 0:
                            docs_to_verify.append({
                                "filename": filename,
                                "low_count": counts["low"]
                            })
                    
                    if docs_to_verify:
                        for doc in docs_to_verify:
                            st.warning(f"⚠️ {doc['filename']} - Needs verification ({doc['low_count']} fields with <90% confidence)")
                    else:
                        st.success("✅ No documents need manual verification (all fields above 90% confidence)")
                    
                    # 5. Display Blob Storage upload results
                    if blob_service_client and blob_upload_results:
                        st.subheader("5. Azure Blob Storage Upload Results")
                        
                        # Create a table to show upload results
                        upload_rows = []
                        for result in blob_upload_results:
                            upload_rows.append({
                                "Filename": result["filename"],
                                "Text File": "✅ Uploaded" if result["text_success"] else "❌ Failed",
                                "JSON File": "✅ Uploaded" if result["json_success"] else "❌ Failed"
                            })
                        
                        upload_df = pd.DataFrame(upload_rows)
                        st.dataframe(upload_df, use_container_width=True)
                    
                    # 6. Download options
                    st.subheader("6. Download Options")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        # Download all text files as a zip
                        st.download_button(
                            label="Download All Text Files (ZIP)",
                            data=text_zip,
                            file_name=f"extracted_data_{timestamp}.zip",
                            mime="application/zip"
                        )
                    
                    with col2:
                        try:
                            # Download as CSV
                            if 'results_df' in locals() and not results_df.empty:
                                csv = results_df.to_csv(index=False)
                                st.download_button(
                                    label="Download CSV Results",
                                    data=csv,
                                    file_name=f"financial_data_extraction_{timestamp}.csv",
                                    mime="text/csv"
                                )
                            else:
                                st.info("CSV download not available due to DataFrame creation issues.")
                        except Exception as e:
                            st.error(f"Error creating CSV: {e}")
                            st.info("CSV download is unavailable due to an error.")
                    
                    with col3:
                        # Download document verification report
                        if docs_to_verify:
                            verification_data = {
                                "Document": [doc["filename"] for doc in docs_to_verify],
                                "Low Confidence Fields (<90%)": [doc["low_count"] for doc in docs_to_verify]
                            }
                            verification_df = pd.DataFrame(verification_data)
                            verification_csv = verification_df.to_csv(index=False)
                            
                            st.download_button(
                                label="Download Verification Report",
                                data=verification_csv,
                                file_name=f"verification_report_{timestamp}.csv",
                                mime="text/csv"
                            )
                        else:
                            st.download_button(
                                label="Download Verification Report",
                                data="No documents require verification",
                                file_name=f"verification_report_{timestamp}.txt",
                                mime="text/plain",
                                disabled=True
                            )
                else:
                    st.warning("No results were extracted from the PDFs.")

if __name__ == "__main__":
    main()
