# Add this to the View Results mode, after the existing tabs
with view_tabs[4]:  # Bulk Management tab
    st.subheader("Bulk Document Management")
    
    # Create a radio button for selecting confidence level
    confidence_option = st.radio(
        "Select Confidence Level",
        ["High Confidence (≥95%)", "Low Confidence (<95%)"],
        key="confidence_option"
    )
    
    # Initialize session state variables if not present
    if 'validated_docs' not in st.session_state:
        st.session_state.validated_docs = {}
    if 'processed_docs' not in st.session_state:
        st.session_state.processed_docs = {}
    
    # Get the appropriate documents based on confidence selection
    selected_docs = []
    if confidence_option == "High Confidence (≥95%)":
        for pdf_result in all_pdf_results:
            if has_high_confidence(pdf_result, threshold=95.0):
                selected_docs.append(pdf_result)
        result_folder = "processed_results/high_confidence/"
        source_folder = "source_documents/high_confidence/"
    else:  # Low Confidence
        for pdf_result in all_pdf_results:
            if not has_high_confidence(pdf_result, threshold=95.0):
                selected_docs.append(pdf_result)
        result_folder = "processed_results/low_confidence/"
        source_folder = "source_documents/low_confidence/"
    
    # Display validation tracking table
    st.subheader(f"Document Validation - {confidence_option}")
    
    if selected_docs:
        # Create a dataframe for tracking
        doc_tracking = []
        
        for doc in selected_docs:
            # Check if document is validated
            is_validated = False
            if doc["filename"] in st.session_state.validated_docs:
                is_validated = st.session_state.validated_docs[doc["filename"]]
            
            # Check if document was successfully processed (has extracted pages)
            is_processed = False
            if len(doc["pages"]) > 0:
                is_processed = True
            
            doc_tracking.append({
                "Filename": doc["filename"],
                "Pages": doc["total_pages"],
                "Extracted Fields": len(doc["pages"]),
                "Processed": "✅" if is_processed else "❌",
                "Validated": is_validated  # This will be displayed as a checkbox
            })
        
        # Show the tracking table with editable validation checkboxes
        doc_df = pd.DataFrame(doc_tracking)
        
        # Create column config with checkboxes for validation
        column_config = {
            "Validated": st.column_config.CheckboxColumn(
                "Validated",
                help="Check to mark as validated",
                default=False
            )
        }
        
        # Display editable dataframe
        edited_df = st.data_editor(
            doc_df,
            column_config=column_config,
            disabled=["Filename", "Pages", "Extracted Fields", "Processed"],
            key=f"{confidence_option}_editor"
        )
        
        # Update validation status in session state based on edits
        for i, row in edited_df.iterrows():
            filename = row["Filename"]
            is_validated = row["Validated"]
            st.session_state.validated_docs[filename] = is_validated
        
        # Count stats
        total_docs = len(selected_docs)
        validated_docs = sum(1 for doc in selected_docs if doc["filename"] in st.session_state.validated_docs and st.session_state.validated_docs[doc["filename"]])
        processed_docs = sum(1 for doc in selected_docs if len(doc["pages"]) > 0)
        
        # Show stats
        stats_col1, stats_col2, stats_col3 = st.columns(3)
        stats_col1.metric("Total Documents", total_docs)
        stats_col2.metric("Processed Documents", processed_docs)
        stats_col3.metric("Validated Documents", validated_docs)
        
        # Show bulk upload option if any documents are validated
        validated_docs_list = [doc for doc in selected_docs 
                             if doc["filename"] in st.session_state.validated_docs 
                             and st.session_state.validated_docs[doc["filename"]]]
        
        if validated_docs_list:
            st.subheader(f"Bulk Upload - {confidence_option}")
            
            # Manual container name input
            container_name = st.text_input("Blob Container Name", key=f"{confidence_option}_container")
            
            # Upload button
            if st.button(f"Upload Validated {confidence_option} Documents", key=f"upload_{confidence_option}"):
                if not container_name:
                    st.error("Please enter a blob container name.")
                else:
                    with st.spinner(f"Uploading {len(validated_docs_list)} validated documents..."):
                        upload_results = []
                        
                        for doc in validated_docs_list:
                            try:
                                # Only process documents that have been successfully extracted
                                if len(doc["pages"]) == 0:
                                    upload_results.append({
                                        "Filename": doc["filename"],
                                        "Status": "❌ No extracted data",
                                        "CSV": "❌ Skipped",
                                        "Source Document": "❌ Skipped"
                                    })
                                    continue
                                
                                # Create CSV for this document
                                pdf_rows = []
                                for page in doc["pages"]:
                                    page_num = page["page"]
                                    data = page["data"]
                                    extraction_timestamp = page.get("extraction_timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                                    
                                    # Initialize row data
                                    row_data = {
                                        "Page": page_num,
                                        "Extraction_Timestamp": extraction_timestamp
                                    }
                                    
                                    # Process each field
                                    for field in ["VendorName", "InvoiceNumber", "InvoiceDate", "CustomerName", 
                                                "PurchaseOrder", "StockCode", "UnitPrice", "InvoiceAmount", 
                                                "Freight", "Salestax", "Total"]:
                                        field_data = data.get(field, {})
                                        
                                        if isinstance(field_data, dict):
                                            value = field_data.get("value", "N/A")
                                            confidence = field_data.get("confidence", 0)
                                        else:
                                            value = field_data if field_data else "N/A"
                                            confidence = 0
                                        
                                        # Add to row data
                                        row_data[field] = value
                                        row_data[f"{field} Confidence"] = round(confidence * 100, 2)
                                    
                                    # Look for manually edited fields
                                    edited_fields_with_values = []
                                    
                                    # Check manual edit tracking info
                                    if ('manual_edit_tracking' in st.session_state and 
                                        doc["filename"] in st.session_state.manual_edit_tracking and 
                                        str(page_num) in st.session_state.manual_edit_tracking[doc["filename"]]):
                                        
                                        # Get edit tracking info for this page
                                        edit_info = st.session_state.manual_edit_tracking[doc["filename"]][str(page_num)]
                                        
                                        # Get manually edited fields
                                        for field, info in edit_info.items():
                                            if info.get("edited", False):
                                                current_value = row_data.get(field, "N/A")
                                                edited_fields_with_values.append(f"{field}: {current_value}")
                                    
                                    # Add edit tracking columns
                                    row_data["Manually_Edited_Fields"] = "; ".join(edited_fields_with_values) if edited_fields_with_values else ""
                                    row_data["Manual_Edit"] = "Y" if edited_fields_with_values else "N"
                                    
                                    # Add to rows
                                    pdf_rows.append(row_data)
                                
                                # Create DataFrame and CSV
                                if pdf_rows:
                                    pdf_df = pd.DataFrame(pdf_rows, dtype=str)
                                    pdf_csv = pdf_df.to_csv(index=False)
                                    
                                    # Get invoice number and total if available for filename
                                    invoice_number = "unknown"
                                    total_amount = "unknown"
                                    
                                    # Look through all pages to find invoice number and total
                                    for page in doc["pages"]:
                                        data = page["data"]
                                        
                                        # Extract invoice number
                                        if "InvoiceNumber" in data:
                                            field_data = data["InvoiceNumber"]
                                            if isinstance(field_data, dict):
                                                invoice_number = field_data.get("value", "unknown")
                                            else:
                                                invoice_number = field_data if field_data else "unknown"
                                        
                                        # Extract total
                                        if "Total" in data:
                                            field_data = data["Total"]
                                            if isinstance(field_data, dict):
                                                total_amount = field_data.get("value", "unknown")
                                            else:
                                                total_amount = field_data if field_data else "unknown"
                                    
                                    # Clean values for filename
                                    safe_invoice_number = ''.join(c for c in str(invoice_number) if c.isalnum() or c in '-_.')
                                    safe_total_amount = ''.join(c for c in str(total_amount) if c.isalnum() or c in '-_.')
                                    
                                    filename = doc["filename"]
                                    base_filename = os.path.splitext(filename)[0]
                                    
                                    # Upload CSV to blob storage
                                    csv_blob_name = f"{result_folder}{base_filename}_{safe_invoice_number}_{safe_total_amount}_{timestamp}.csv"
                                    csv_success, csv_url = upload_to_blob_storage(
                                        blob_service_client,
                                        container_name,
                                        csv_blob_name,
                                        pdf_csv,
                                        "text/csv"
                                    )
                                    
                                    # Upload source document
                                    source_success = False
                                    source_url = None
                                    
                                    # Handle different input methods
                                    input_method = st.session_state.get("input_method", "Unknown")
                                    
                                    if input_method == "Upload Files" and 'original_files' in st.session_state:
                                        # Find the original uploaded file
                                        original_file = next((f for f in st.session_state.original_files 
                                                              if hasattr(f, 'name') and f.name == filename), None)
                                        
                                        if original_file:
                                            # Get file content and upload
                                            original_file.seek(0)
                                            file_content = original_file.read()
                                            
                                            source_blob_name = f"{source_folder}{filename}"
                                            source_success, source_url = upload_to_blob_storage(
                                                blob_service_client,
                                                container_name,
                                                source_blob_name,
                                                file_content,
                                                "application/pdf"
                                            )
                                    
                                    elif input_method == "Azure Blob Storage" and 'original_files' in st.session_state:
                                        # Find the original blob
                                        original_blob = next((b for b in st.session_state.original_files 
                                                             if isinstance(b, str) and b.endswith(filename)), None)
                                        
                                        if original_blob and 'blob_container' in st.session_state:
                                            source_container = st.session_state.blob_container
                                            
                                            try:
                                                # Download blob content and upload to new location
                                                blob_content = download_blob_to_memory(
                                                    blob_service_client, 
                                                    source_container, 
                                                    original_blob
                                                )
                                                
                                                if blob_content:
                                                    source_blob_name = f"{source_folder}{filename}"
                                                    source_success, source_url = upload_to_blob_storage(
                                                        blob_service_client,
                                                        container_name,
                                                        source_blob_name,
                                                        blob_content,
                                                        "application/pdf"
                                                    )
                                            except Exception as e:
                                                st.error(f"Error copying source document: {str(e)}")
                                    
                                    # Add result
                                    upload_results.append({
                                        "Filename": filename,
                                        "Status": "✅ Processed",
                                        "CSV": "✅ Uploaded" if csv_success else "❌ Failed",
                                        "Source Document": "✅ Uploaded" if source_success else "❌ Failed"
                                    })
                                    
                                    # Mark as processed in session state
                                    st.session_state.processed_docs[filename] = True
                                else:
                                    upload_results.append({
                                        "Filename": filename,
                                        "Status": "❌ No data to upload",
                                        "CSV": "❌ Skipped",
                                        "Source Document": "❌ Skipped"
                                    })
                            except Exception as e:
                                upload_results.append({
                                    "Filename": doc["filename"],
                                    "Status": f"❌ Error: {str(e)}",
                                    "CSV": "❌ Failed",
                                    "Source Document": "❌ Failed"
                                })
                        
                        # Display upload results
                        st.subheader("Upload Results")
                        st.dataframe(pd.DataFrame(upload_results))
                        
                        # Show success message
                        successful_uploads = sum(1 for result in upload_results if "✅ Uploaded" in result["CSV"])
                        st.success(f"Successfully uploaded {successful_uploads} of {len(validated_docs_list)} documents.")
        else:
            st.info("No validated documents selected. Please validate documents to enable bulk upload.")
    else:
        st.info(f"No {confidence_option} documents found.")

THis bulk upload option worked well
