import json
import re
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient
import logging
from typing import Any, Dict


def init_secret_client(keyvault_url: str, logger=None) -> SecretClient:
    """
    Initialize and return an Azure Key Vault SecretClient.
    """
    if logger:
        logger.info(f"Initializing Key Vault client for: {keyvault_url}")
    credential = DefaultAzureCredential()
    return SecretClient(vault_url=keyvault_url, credential=credential)


def resolve_keyvault_reference(secret_client: SecretClient, reference: str, logger=None) -> str:
    """
    Resolve a single @azureKeyVault(secret-name) reference into its secret value.
    """
    matches = re.findall(r"@azureKeyVault\((.*?)\)", reference)
    if not matches:
        if logger:
            logger.warning(f"Invalid Key Vault reference format: {reference}")
        return reference

    secret_name = matches[0].strip()
    try:
        secret_value = secret_client.get_secret(secret_name).value
        if logger:
            logger.debug(f"Resolved secret: {secret_name}")
        return secret_value
    except Exception as e:
        if logger:
            logger.error(f"Failed to resolve secret '{secret_name}': {str(e)}")
        raise


def resolve_config_references(config: Any, secret_client: SecretClient, logger=None) -> Any:
    """
    Recursively resolve all @azureKeyVault references inside config dict/list/str.
    """
    if isinstance(config, dict):
        return {k: resolve_config_references(v, secret_client, logger) for k, v in config.items()}
    elif isinstance(config, list):
        return [resolve_config_references(v, secret_client, logger) for v in config]
    elif isinstance(config, str) and config.startswith("@azureKeyVault("):
        return resolve_keyvault_reference(secret_client, config, logger)
    else:
        return config


def load_config(config_path: str, logger=None) -> Dict:
    """
    Load config.json and resolve @azureKeyVault(secret-name) placeholders.
    If keyvault_url is defined inside config["azure_keyvault"]["vault_url"],
    use it to initialize the SecretClient.
    """
    if logger is None:
        logger = logging.getLogger(__name__)

    try:
        with open(config_path, "r") as f:
            config_data = json.load(f)
        logger.info(f"Loaded config from: {config_path}")

        # Check if Key Vault references exist
        config_str = json.dumps(config_data)
        if "@azureKeyVault(" not in config_str:
            logger.info("No Key Vault references found in config")
            return config_data

        # Extract vault_url from config.json
        keyvault_url = (
            config_data.get("azure_keyvault", {}).get("vault_url")
        )
        if not keyvault_url:
            raise ValueError("Config contains Key Vault references but no vault_url found in config['azure_keyvault']")

        secret_client = init_secret_client(keyvault_url, logger)

        resolved_config = resolve_config_references(config_data, secret_client, logger)

        logger.info("Successfully resolved all Key Vault secrets")
        return resolved_config

    except FileNotFoundError:
        logger.error(f"Config file not found: {config_path}")
        raise
    except json.JSONDecodeError as e:
        logger.error(f"Invalid JSON in config file: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"Error loading config: {str(e)}")
        raise

------
"azure_keyvault": {
    "vault_url": "https://your-keyvault-name.vault.azure.net/"
}
------
logger = logging.getLogger("config-loader")
config = load_config("config.json", logger=logger)
