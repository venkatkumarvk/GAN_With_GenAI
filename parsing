import base64  
import os  
import json  
from dotenv import load_dotenv  
from openai import AzureOpenAI  
from pathlib import Path  
import fitz  # PyMuPDF  
  
# Load environment variables  
load_dotenv()  
  
# Azure OpenAI environment variables  
aoai_endpoint = os.getenv("AOAI_ENDPOINT")  
aoai_api_key = os.getenv("AOAI_API_KEY")  
aoai_deployment_name = os.getenv("AOAI_DEPLOYMENT")  
  
# Initialize the Azure OpenAI client  
client = AzureOpenAI(  
    azure_endpoint=aoai_endpoint,  
    api_key=aoai_api_key,  
    api_version="2024-08-01-preview"  
)  
  
def image_to_data_url(image_bytes, mime_type='image/png'):  
    """  
    Convert image bytes to a data URL.  
  
    Parameters:  
    -----------  
    image_bytes : bytes  
        The image data in bytes.  
    mime_type : str  
        The MIME type of the image.  
  
    Returns:  
    --------  
    str  
        A data URL representing the image.  
    """  
    base64_encoded_data = base64.b64encode(image_bytes).decode('utf-8')  
    return f"data:{mime_type};base64,{base64_encoded_data}"  
  
def extract_text_from_page(page):
    """
    Extract text content from a PDF page.
    
    Parameters:
    -----------
    page : fitz.Page
        The PDF page object.
        
    Returns:
    --------
    str
        The extracted text content.
    """
    text = page.get_text()
    return text

def call_azure_openai_vision(prompt, image_data_url, client=client, aoai_deployment_name=aoai_deployment_name):  
    """  
    Call the Azure OpenAI Vision service to analyze an image using the standard API.
  
    Parameters:  
    -----------  
    prompt : str  
        The prompt to send to the model.  
    image_data_url : str  
        The data URL of the image.  
    client : AzureOpenAI  
        The Azure OpenAI client instance.  
    aoai_deployment_name : str  
        The deployment name of the Azure OpenAI model.  

    Returns:  
    --------  
    dict  
        The parsed response containing extracted information.
    """  
  
    completion = client.chat.completions.create(  
        model=aoai_deployment_name,  
        messages=[{  
            "role": "system",  
            "content": "You are an AI helpful assistant that extracts information from documents. Your task is to extract customer name, account number, and balance (in USD) from financial documents. Return ONLY a JSON object with keys 'customerName', 'accountNumber', and 'balanceUSD'."  
        }, {  
            "role": "user",  
            "content": [{  
                "type": "text",  
                "text": prompt  
            }, {  
                "type": "image_url",  
                "image_url": {  
                    "url": image_data_url  
                }  
            }]  
        }],  
        max_tokens=2000,  
        temperature=0.7,  
        response_format={"type": "json_object"}
    )  
    
    # Extract the response content
    response_content = completion.choices[0].message.content
    
    # Parse the JSON string into a Python dictionary
    extracted_information = json.loads(response_content)
    
    return extracted_information  

def save_structured_text_file(extracted_info, output_path, page_num):
    """
    Save extracted structured information to a formatted text file.
    
    Parameters:
    -----------
    extracted_info : dict
        The extracted structured information.
    output_path : Path
        The path to save the text file.
    page_num : int
        The page number.
    """
    with open(output_path, 'w', encoding='utf-8') as text_file:
        text_file.write(f"Page {page_num}\n")
        for key, value in extracted_info.items():
            text_file.write(f"\"{key}\": \"{value}\"\n")
  
def main():  
    # Define input and output directories  
    input_dir = Path('input_documents')  
    output_dir = Path('output_results')  
    output_dir.mkdir(exist_ok=True)  

    # Define output images directory  
    output_images_dir = Path('output_images')  
    output_images_dir.mkdir(exist_ok=True)
    
    # Define output text directory
    output_text_dir = Path('output_text')
    output_text_dir.mkdir(exist_ok=True)
    
    # Define output structured text directory
    output_structured_txt_dir = Path('output_structured_txt')
    output_structured_txt_dir.mkdir(exist_ok=True)
    
    # Define output structured JSON directory
    output_structured_json_dir = Path('output_structured_json')
    output_structured_json_dir.mkdir(exist_ok=True)
  
    # Prompt to extract specific information  
    prompt = """Based on this image, extract the following information:   
                1) What is the customer name?  
                2) What is the account number?
                3) What is the balance (in USD) in the account?"""  
  
    # Iterate over each PDF in the input directory  
    for pdf_file in input_dir.glob('*.pdf'):  
        if pdf_file.is_file():  
            print(f"Processing {pdf_file.name}...")  
  
            # Open the PDF file  
            try:  
                doc = fitz.open(pdf_file)
                page_count = len(doc)
                print(f"Found {page_count} pages in {pdf_file.name}")
                
                # Create a list to store extracted data from all pages
                all_page_results = []
                
                # Process each page in the PDF
                for page_num in range(page_count):
                    try:
                        # Load the current page
                        page = doc.load_page(page_num)
                        
                        # Extract text from the page
                        page_text = extract_text_from_page(page)
                        
                        # Save extracted text to a file
                        text_output_path = output_text_dir / f"{pdf_file.stem}_page{page_num+1}.txt"
                        with open(text_output_path, 'w', encoding='utf-8') as text_file:
                            text_file.write(page_text)
                        print(f"Saved raw text to {text_output_path.name}")
                        
                        # Process image
                        zoom = 2  # Zoom factor for image quality
                        pix = page.get_pixmap(matrix=fitz.Matrix(zoom, zoom))
                        image_bytes = pix.tobytes()
                        
                        # Save the image to output_images directory with page number in filename
                        image_output_path = output_images_dir / f"{pdf_file.stem}_page{page_num+1}.png"
                        pix.save(str(image_output_path))
                        print(f"Saved image to {image_output_path.name}")
                        
                        # Convert image to data URL
                        image_data_url = image_to_data_url(image_bytes)
                        
                        # Call Azure OpenAI Vision to extract structured information
                        extracted_info = call_azure_openai_vision(prompt, image_data_url)
                        
                        # 1. Save structured info to text file in the format requested
                        txt_output_path = output_structured_txt_dir / f"{pdf_file.stem}_page{page_num+1}.txt"
                        save_structured_text_file(extracted_info, txt_output_path, page_num+1)
                        print(f"Saved structured text to {txt_output_path.name}")
                        
                        # 2. Save structured info to JSON file for each page
                        json_output_path = output_structured_json_dir / f"{pdf_file.stem}_page{page_num+1}.json"
                        with open(json_output_path, 'w', encoding='utf-8') as json_file:
                            page_json = {
                                "page": page_num + 1,
                                "data": extracted_info
                            }
                            json.dump(page_json, json_file, ensure_ascii=False, indent=2)
                        print(f"Saved structured JSON to {json_output_path.name}")
                        
                        # Add page info to the collected results for the complete PDF JSON
                        extracted_info_with_page = {
                            "page": page_num + 1,
                            "data": extracted_info,
                            "text_content": page_text
                        }
                        
                        # Add to our collection of all page results
                        all_page_results.append(extracted_info_with_page)
                        
                    except Exception as e:
                        print(f"Error processing page {page_num+1} of {pdf_file.name}: {e}")
                
                # Define output file path for the entire PDF
                output_file = output_dir / f"{pdf_file.stem}.json"
                
                # Create a result object that contains all pages' data
                final_result = {
                    "filename": pdf_file.name,
                    "total_pages": page_count,
                    "pages": all_page_results
                }
                
                # Save the result as a JSON file
                with open(output_file, 'w', encoding='utf-8') as json_file:
                    json.dump(final_result, json_file, ensure_ascii=False, indent=2)
                
                print(f"Saved complete PDF information to {output_file.name}")
                
            except Exception as e:
                print(f"Error processing {pdf_file.name}: {e}")
  
if __name__ == "__main__":  
    main()
