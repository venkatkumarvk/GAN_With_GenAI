import base64  
import os  
import json  
from dotenv import load_dotenv  
from openai import AzureOpenAI  
from pathlib import Path  
import fitz  # PyMuPDF  
  
# Load environment variables  
load_dotenv()  
  
# Azure OpenAI environment variables  
aoai_endpoint = os.getenv("AOAI_ENDPOINT")  
aoai_api_key = os.getenv("AOAI_API_KEY")  
aoai_deployment_name = os.getenv("AOAI_DEPLOYMENT")  
  
# Initialize the Azure OpenAI client  
client = AzureOpenAI(  
    azure_endpoint=aoai_endpoint,  
    api_key=aoai_api_key,  
    api_version="2024-08-01-preview"  
)  
  
def image_to_data_url(image_bytes, mime_type='image/png'):  
    """  
    Convert image bytes to a data URL.  
    """  
    base64_encoded_data = base64.b64encode(image_bytes).decode('utf-8')  
    return f"data:{mime_type};base64,{base64_encoded_data}"  
  
def extract_text_from_page(page):
    """
    Extract text content from a PDF page.
    """
    return page.get_text()

def call_azure_openai_vision(prompt, image_data_url, client=client, aoai_deployment_name=aoai_deployment_name):  
    """  
    Call the Azure OpenAI Vision service to analyze an image.
    """  
    completion = client.chat.completions.create(  
        model=aoai_deployment_name,  
        messages=[{  
            "role": "system",  
            "content": "You are an AI helpful assistant that extracts information from documents. Your task is to extract customer name, account number, and balance (in USD) from financial documents. Return ONLY a JSON object with keys 'customerName', 'accountNumber', and 'balanceUSD'."  
        }, {  
            "role": "user",  
            "content": [{  
                "type": "text",  
                "text": prompt  
            }, {  
                "type": "image_url",  
                "image_url": {  
                    "url": image_data_url  
                }  
            }]  
        }],  
        max_tokens=2000,  
        temperature=0.7,  
        response_format={"type": "json_object"}
    )  
    
    # Extract and parse the response content
    response_content = completion.choices[0].message.content
    return json.loads(response_content)  

def process_pdf(pdf_path, prompt):
    """
    Process a PDF file and extract information from all pages at once.
    
    Parameters:
    -----------
    pdf_path : Path
        Path to the PDF file.
    prompt : str
        The prompt to use for Azure OpenAI Vision.
        
    Returns:
    --------
    dict
        A dictionary containing the extracted information from all pages.
    """
    try:
        # Open the PDF file
        doc = fitz.open(pdf_path)
        page_count = len(doc)
        print(f"Processing {pdf_path.name} - {page_count} pages...")
        
        # Create a list to store extracted data from all pages
        all_page_results = []
        
        # Process each page in the PDF
        for page_num in range(page_count):
            try:
                # Load the current page
                page = doc.load_page(page_num)
                
                # Extract text from the page
                page_text = extract_text_from_page(page)
                
                # Process image
                zoom = 2  # Zoom factor for image quality
                pix = page.get_pixmap(matrix=fitz.Matrix(zoom, zoom))
                image_bytes = pix.tobytes()
                
                # Convert image to data URL
                image_data_url = image_to_data_url(image_bytes)
                
                # Call Azure OpenAI Vision to extract structured information
                extracted_info = call_azure_openai_vision(prompt, image_data_url)
                
                # Add page info to the collected results
                extracted_info_with_page = {
                    "page": page_num + 1,
                    "data": extracted_info,
                    "text_content": page_text
                }
                
                # Add to our collection of all page results
                all_page_results.append(extracted_info_with_page)
                print(f"- Processed page {page_num+1}: {extracted_info}")
                
            except Exception as e:
                print(f"Error processing page {page_num+1} of {pdf_path.name}: {e}")
                all_page_results.append({
                    "page": page_num + 1,
                    "data": {"error": str(e)},
                    "text_content": "Error extracting text"
                })
        
        # Create a result object that contains all pages' data
        final_result = {
            "filename": pdf_path.name,
            "total_pages": page_count,
            "pages": all_page_results
        }
        
        return final_result
        
    except Exception as e:
        print(f"Error processing {pdf_path.name}: {e}")
        return {
            "filename": pdf_path.name,
            "error": str(e),
            "total_pages": 0,
            "pages": []
        }
  
def main():  
    # Define input and output directories  
    input_dir = Path('input_documents')  
    output_dir = Path('output_results')  
    output_dir.mkdir(exist_ok=True)  
  
    # Prompt to extract specific information  
    prompt = """Based on this image, extract the following information:   
                1) What is the customer name?  
                2) What is the account number?
                3) What is the balance (in USD) in the account?"""  
  
    # Store all PDF results
    all_pdf_results = []
    
    # Iterate over each PDF in the input directory  
    for pdf_file in input_dir.glob('*.pdf'):  
        if pdf_file.is_file():
            # Process the PDF and get results
            pdf_result = process_pdf(pdf_file, prompt)
            
            # Add to our collection of all PDF results
            all_pdf_results.append(pdf_result)
            
            # Save individual PDF result
            output_file = output_dir / f"{pdf_file.stem}.json"
            with open(output_file, 'w', encoding='utf-8') as json_file:
                json.dump(pdf_result, json_file, ensure_ascii=False, indent=2)
            
            print(f"Saved complete PDF information to {output_file.name}")
    
    # Save combined results from all PDFs
    combined_output_file = output_dir / "all_documents_results.json"
    with open(combined_output_file, 'w', encoding='utf-8') as json_file:
        json.dump({
            "total_documents": len(all_pdf_results),
            "documents": all_pdf_results
        }, json_file, ensure_ascii=False, indent=2)
    
    print(f"Saved combined results from all PDFs to {combined_output_file.name}")
  
if __name__ == "__main__":  
    main()
