# PDF Processing System - Client Documentation

## Table of Contents
1. [System Overview](#system-overview)
2. [Architecture](#architecture)
3. [Features](#features)
4. [Configuration](#configuration)
5. [Document Types](#document-types)
6. [Overlay Processing](#overlay-processing)
7. [Usage Guide](#usage-guide)
8. [API Reference](#api-reference)
9. [Troubleshooting](#troubleshooting)
10. [Best Practices](#best-practices)

---

## System Overview

The PDF Processing System is an enterprise-grade solution that automatically extracts structured data from various document types using Azure OpenAI's vision capabilities. The system supports multiple document formats, intelligent overlay processing, and automated archiving with high-confidence classification.

### Key Capabilities
- **Multi-Document Support**: Process invoices, EOBs (Explanation of Benefits), claims, and extensible to other document types
- **AI-Powered Extraction**: Uses Azure OpenAI GPT-4 Vision models for intelligent data extraction
- **Smart Overlay Processing**: Automatically enhances empty claim forms with overlay templates
- **Confidence-Based Classification**: Separates high and low confidence results for quality control
- **Automated Archiving**: Organizes processed and unprocessed files with ZIP archiving
- **Scalable Architecture**: Supports both batch and real-time processing modes

---

## Architecture

### High-Level Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Data Sources  │    │  Processing Core │    │   Output Store  │
├─────────────────┤    ├──────────────────┤    ├─────────────────┤
│ Azure Blob      │───▶│ Document Router  │───▶│ Azure Blob      │
│ Local Files     │    │ Overlay Engine   │    │ CSV Results     │
│                 │    │ AI Processor     │    │ Source PDFs     │
└─────────────────┘    │ Archiver         │    │ Archive ZIPs    │
                       └──────────────────┘    └─────────────────┘
```

### Component Architecture

```
┌─────────────────────────────────────────────────────────────────────┐
│                            Main Controller                           │
├─────────────────────────────────────────────────────────────────────┤
│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐    │
│ │   Config    │ │  Document   │ │   Overlay   │ │   Archive   │    │
│ │  Manager    │ │   Router    │ │  Processor  │ │  Manager    │    │
│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘    │
├─────────────────────────────────────────────────────────────────────┤
│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐    │
│ │   Storage   │ │     PDF     │ │   AI Client │ │   Logger    │    │
│ │   Helper    │ │  Processor  │ │  (OpenAI)   │ │             │    │
│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘    │
└─────────────────────────────────────────────────────────────────────┘
```

### Data Flow

1. **Input**: PDF files from Azure Blob Storage or local filesystem
2. **Document Type Detection**: Route to appropriate processing pipeline
3. **Overlay Assessment**: Determine if overlay enhancement is needed (claims only)
4. **Page Extraction**: Convert PDF pages to base64 images
5. **AI Processing**: Send to Azure OpenAI with document-specific prompts
6. **Data Extraction**: Parse structured data with confidence scores
7. **Classification**: Sort results by confidence level
8. **Output Generation**: Create CSV files and organize source documents
9. **Archiving**: Package processed files and cleanup input storage

---

## Features

### Document Processing
- **Multi-format Support**: PDF documents of varying sizes and layouts
- **Page-by-page Processing**: Independent processing of multi-page documents
- **Batch Processing**: Configurable batch sizes for optimal performance
- **Error Handling**: Robust error recovery and logging

### AI Integration
- **Multiple Models**: Different Azure OpenAI models per document type
- **Custom Prompts**: Document-specific extraction prompts
- **Confidence Scoring**: AI-generated confidence levels for quality assessment
- **System Prompts**: Specialized system prompts for each document type

### Overlay Processing (Claims)
- **Smart Detection**: Automatically identifies empty forms needing enhancement
- **Reference Matching**: Compares documents to reference templates
- **Content Analysis**: Analyzes pixel density to detect sparse documents
- **Multi-page Support**: Independent overlay decisions per page
- **Transparency Handling**: Professional overlay with transparency management

### Storage & Archiving
- **Azure Blob Integration**: Native support for Azure Blob Storage
- **Confidence-based Folders**: Automatic organization by confidence levels
- **Source Preservation**: Maintains original PDFs with processed results
- **ZIP Archiving**: Automated archiving with processed/unprocessed separation
- **Timestamped Outputs**: Unique identifiers for all processed files

---

## Configuration

### Configuration Structure

The system uses a JSON configuration file with the following structure:

```json
{
  "azure_openai": {
    "api_version": "2023-12-01-preview",
    "default": {
      "api_key": "your-default-api-key",
      "azure_endpoint": "https://your-endpoint.openai.azure.com/",
      "deployment_name": "your-deployment-name"
    },
    "models": {
      "invoice": {
        "api_key": "your-invoice-api-key",
        "azure_endpoint": "https://invoice-endpoint.openai.azure.com/",
        "deployment_name": "gpt-4-vision-invoice"
      }
    }
  },
  "processing": {
    "batch_size": 10,
    "confidence_threshold": 80,
    "document_types": {
      "invoice": {
        "extraction_fields": ["invoice_number", "total_amount", "date", "vendor"],
        "prompt_module": "invoice_prompt",
        "overlay_enabled": false
      }
    }
  }
}
```

### Configuration Parameters

#### Azure OpenAI Settings
- **api_version**: Azure OpenAI API version
- **default**: Fallback configuration for document types without specific models
- **models**: Document-specific model configurations

#### Processing Settings
- **batch_size**: Number of pages to process simultaneously (1-50)
- **confidence_threshold**: Minimum confidence for high-confidence classification (0-100)
- **zoom_factor**: Image scaling factor for better OCR (1.0-3.0)
- **timeout_seconds**: Maximum processing time per batch

#### Storage Settings
- **connection_string**: Azure Storage connection string
- **input_container**: Container for input PDF files
- **output_container**: Container for processed results
- **input_archive_container**: Container for archived files

---

## Document Types

### Currently Supported Types

#### 1. Invoice Documents
- **Purpose**: Commercial invoices and bills
- **Extract Fields**: invoice_number, total_amount, date, vendor
- **Confidence Areas**: Header information, line items, totals
- **Common Formats**: Standard business invoices, utility bills

#### 2. EOB (Explanation of Benefits)
- **Purpose**: Insurance explanation documents
- **Extract Fields**: eob_number, patient_name, service_date, paid_amount, provider
- **Confidence Areas**: Member information, service details, payment amounts
- **Common Formats**: Health insurance EOBs, Medicare statements

#### 3. Claim Documents
- **Purpose**: Medical and insurance claims
- **Extract Fields**: claim_number, patient_id, diagnosis_code, procedure_code, claim_amount
- **Confidence Areas**: Patient data, medical codes, billing amounts
- **Common Formats**: CMS-1500, UB-04, proprietary claim forms
- **Special Feature**: Overlay processing for empty forms

### Adding New Document Types

To add a new document type:

1. **Update Configuration**:
```json
"document_types": {
  "receipt": {
    "extraction_fields": ["receipt_number", "store_name", "total_amount", "date"],
    "prompt_module": "receipt_prompt",
    "overlay_enabled": false
  }
}
```

2. **Create Prompt File** (`receipt_prompt.py`):
```python
systemprompt = """You are an expert in analyzing receipt documents..."""
prompt = """Extract the following information: {extraction_fields}..."""
```

3. **Update Command Line Arguments**:
```python
parser.add_argument("--doctype", choices=["invoice", "eob", "claim", "receipt"])
```

---

## Overlay Processing

### Overview
Overlay processing is a specialized feature designed for claim documents that automatically enhances empty or sparse forms with visual overlays to improve AI recognition and data extraction accuracy.

### How It Works

#### 1. Reference-Based Detection
```python
# System compares each page to a reference template
similarity_score = compare_to_reference(page_image, reference_pdf)
if similarity_score >= 0.7:  # Configurable threshold
    candidate_for_overlay = True
```

#### 2. Content Density Analysis
```python
# Calculates ratio of non-white pixels
content_density = non_white_pixels / total_pixels
if content_density < 0.3:  # Sparse document
    needs_enhancement = True
```

#### 3. Smart Overlay Application
- **Condition**: Document must be both similar to reference AND sparse
- **Process**: Applies transparent red/black table overlay
- **Result**: Enhanced visual structure for better AI recognition

### Configuration

```json
"claim": {
  "overlay_enabled": true,
  "overlay_config": {
    "reference_pdf_path": "reference_files/claim_reference.pdf",
    "overlay_pdf_path": "reference_files/claim_overlay.pdf",
    "similarity_threshold": 0.7,
    "content_density_threshold": 0.3,
    "use_prompt_detection": true
  }
}
```

### Multi-Page Behavior
- Each page is evaluated independently
- Overlay applied only to pages that meet criteria
- Pre-filled pages remain unchanged
- Mixed documents (some empty, some filled) handled correctly

### Command Line Control
```bash
# Force enable overlay
--claim-overlay

# Disable overlay completely
--no-overlay
```

---

## Usage Guide

### Basic Usage

#### 1. Setup Requirements
- Azure OpenAI account with GPT-4 Vision deployment
- Azure Storage account
- Python 3.8+ environment
- Required Python packages (see requirements.txt)

#### 2. Configuration Setup
1. Copy `config.json.template` to `config.json`
2. Update Azure OpenAI credentials
3. Configure Azure Storage settings
4. Set processing parameters

#### 3. Prepare Reference Files (for Claims)
```
reference_files/
├── claim_reference.pdf    # Template to match against
└── claim_overlay.pdf      # Red/black overlay structure
```

### Command Line Interface

#### Basic Syntax
```bash
python h2.py --apitype [general|batch] --source [azure|local] --folder [path] --doctype [type]
```

#### Examples

##### Process Invoices
```bash
python h2.py \
  --apitype general \
  --source azure \
  --folder "invoices/2024/" \
  --doctype invoice
```

##### Process Claims with Overlay
```bash
python h2.py \
  --apitype batch \
  --source azure \
  --folder "claims/pending/" \
  --doctype claim \
  --claim-overlay
```

##### Process with Custom Settings
```bash
python h2.py \
  --apitype general \
  --source azure \
  --folder "eobs/" \
  --doctype eob \
  --config custom_config.json \
  --log-level DEBUG \
  --no-archive
```

### API Processing Modes

#### General API Mode
- **Use Case**: Real-time processing, smaller batches
- **Advantages**: Immediate results, better error handling
- **Best For**: Development, testing, small volumes

#### Batch API Mode
- **Use Case**: Large volume processing
- **Advantages**: Cost-effective, higher throughput
- **Best For**: Production workloads, bulk processing

---

## API Reference

### Main Functions

#### `process_azure_pdf_files(config, api_type, azure_folder, doc_type, logger, enable_overlay=None)`
Process PDF files from Azure Blob Storage with full feature support.

**Parameters:**
- `config` (dict): Configuration dictionary
- `api_type` (str): "general" or "batch"
- `azure_folder` (str): Azure folder path
- `doc_type` (str): Document type identifier
- `logger` (Logger): Logging instance
- `enable_overlay` (bool, optional): Override overlay setting

**Returns:**
- None (processes files and uploads results)

#### `get_document_config(config, doc_type)`
Retrieve document-specific configuration including model and overlay settings.

**Parameters:**
- `config` (dict): Full configuration
- `doc_type` (str): Document type

**Returns:**
- `tuple`: (extraction_fields, systemprompt, prompt_template, model_config, overlay_config)

### Overlay Processing API

#### `OverlayProcessor.process_pdf_with_overlay(pdf_bytes, overlay_config)`
Apply intelligent overlay processing to PDF documents.

**Parameters:**
- `pdf_bytes` (bytes): PDF content
- `overlay_config` (dict): Overlay configuration

**Returns:**
- `bytes`: Processed PDF with overlays applied

#### `OverlayProcessor.needs_overlay(img, overlay_config)`
Determine if a page requires overlay enhancement.

**Parameters:**
- `img` (numpy.ndarray): Page image
- `overlay_config` (dict): Overlay settings

**Returns:**
- `bool`: True if overlay should be applied

### Storage API

#### `AzureStorageHelper.upload_to_storage(blob_name, content, content_type)`
Upload content to Azure Blob Storage.

**Parameters:**
- `blob_name` (str): Destination blob name
- `content` (bytes/str): Content to upload
- `content_type` (str): MIME type

**Returns:**
- `tuple`: (success, url)

---

## Output Structure

### File Organization

```
output_container/
├── high_confidence/
│   ├── invoice_doc1_INV001_1500.00_20241218_143022.csv
│   ├── eob_doc2_EOB12345_250.00_20241218_143045.csv
│   └── claim_doc3_CLM789_500.00_20241218_143101.csv
├── low_confidence/
│   ├── invoice_doc4_unknown_unknown_20241218_143130.csv
│   └── claim_doc5_CLM101_300.00_20241218_143155.csv
└── source_documents/
    ├── invoice/
    │   ├── high_confidence/
    │   └── low_confidence/
    ├── eob/
    └── claim/
```

### CSV Output Format

#### Invoice CSV Structure
```csv
filename,page_number,document_type,invoice_number,total_amount,date,vendor,confidence
invoice_001.pdf,1,invoice,"INV-12345","$1,500.00","2024-12-01","ABC Company",95
```

#### Claim CSV Structure
```csv
filename,page_number,document_type,claim_number,patient_id,diagnosis_code,procedure_code,claim_amount,confidence
claim_001.pdf,1,claim,"CLM-789","P12345","M79.3","99213","$150.00",88
```

### Archive Structure

```
archive_20241218_143000.zip
├── processed/
│   ├── invoice_001.pdf
│   ├── eob_002.pdf
│   └── claim_003.pdf
└── unprocessed/
    ├── corrupted_file.pdf
    └── unsupported_format.pdf
```

---

## Troubleshooting

### Common Issues

#### 1. Azure OpenAI Connection Errors
**Symptoms**: Authentication failures, endpoint not found
**Solutions**:
- Verify API keys in configuration
- Check endpoint URLs (no trailing slashes)
- Confirm deployment names match Azure setup
- Validate API version compatibility

#### 2. Low Confidence Results
**Symptoms**: Many files in low_confidence folder
**Solutions**:
- Review document quality (scan resolution, clarity)
- Adjust confidence threshold in configuration
- Customize prompts for specific document formats
- Consider preprocessing for image enhancement

#### 3. Overlay Not Applied
**Symptoms**: Empty claim forms not getting overlays
**Solutions**:
- Check reference file paths in configuration
- Verify similarity and density thresholds
- Review reference PDF quality and format
- Enable debug logging to see detection details

#### 4. Storage Upload Failures
**Symptoms**: Files not appearing in Azure Storage
**Solutions**:
- Verify Azure Storage connection string
- Check container names and permissions
- Confirm sufficient storage quota
- Review network connectivity

### Debug Commands

#### Enable Verbose Logging
```bash
python h2.py --log-level DEBUG [other options]
```

#### Test Configuration
```bash
python -c "
import json
config = json.load(open('config.json'))
print('Configuration loaded successfully')
print(f'Document types: {list(config["processing"]["document_types"].keys())}')
"
```

#### Validate Reference Files
```bash
python -c "
import os
from overlay_utils import OverlayProcessor
processor = OverlayProcessor({})
ref_path = 'reference_files/claim_reference.pdf'
overlay_path = 'reference_files/claim_overlay.pdf'
print(f'Reference exists: {os.path.exists(ref_path)}')
print(f'Overlay exists: {os.path.exists(overlay_path)}')
"
```

---

## Best Practices

### Performance Optimization

#### 1. Batch Size Tuning
- **Small documents**: 15-20 pages per batch
- **Large documents**: 5-10 pages per batch
- **Complex layouts**: 3-5 pages per batch
- Monitor processing times and adjust accordingly

#### 2. Model Selection
- Use document-specific models when possible
- Consider cost vs. accuracy trade-offs
- Test with sample documents before production

#### 3. Confidence Thresholds
- Start with 80% threshold
- Adjust based on document quality and requirements
- Lower thresholds for exploratory analysis
- Higher thresholds for production workflows

### Document Quality

#### 1. Input Preparation
- Ensure minimum 300 DPI resolution
- Remove unnecessary pages (covers, blanks)
- Orient documents correctly
- Clean/preprocess if scanning quality is poor

#### 2. Reference Files (Overlays)
- Use high-quality, clean reference templates
- Ensure reference matches target document layouts
- Update references when document formats change
- Test overlay effectiveness with sample documents

### Security & Compliance

#### 1. Data Protection
- Use Azure Private Endpoints for blob storage
- Enable encryption at rest and in transit
- Implement proper access controls
- Regular security reviews of configurations

#### 2. Audit Trail
- Enable detailed logging
- Retain processing logs per compliance requirements
- Monitor access patterns
- Document data lineage

### Monitoring & Maintenance

#### 1. Key Metrics
- Processing success rate
- Average confidence scores
- Processing time per document
- Storage utilization

#### 2. Regular Maintenance
- Review and update prompts based on results
- Monitor model performance and accuracy
- Clean up archived files per retention policies
- Update reference files as document formats evolve

#### 3. Scaling Considerations
- Monitor Azure OpenAI quota and limits
- Plan for peak processing periods
- Consider multiple deployment regions
- Implement retry logic for transient failures

---

## Support & Resources

### Documentation
- Azure OpenAI Documentation
- Azure Blob Storage Documentation
- PyMuPDF Documentation
- OpenCV Documentation

### Logging Locations
- Processing logs: `logs/pdf_processing_[timestamp].log`
- System logs: Console output
- Error logs: Exception details in log files

### Configuration Examples
- `config.json.template`: Base configuration template
- `config_production.json`: Production-ready configuration
- `config_development.json`: Development/testing configuration

### Contact Information
For technical support, feature requests, or bug reports, please contact:
- Technical Support: [your-support-email]
- Documentation Updates: [your-docs-email]
- Feature Requests: [your-feature-requests-email]

---

*Document Version: 1.0*  
*Last Updated: December 2024*  
*System Version: 2.0 with Overlay Processing*
