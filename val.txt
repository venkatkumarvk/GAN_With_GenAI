import json
import re
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient

def load_config(config_path: str, keyvault_url: str) -> dict:
    """
    Load config.json and resolve @azureKeyVault(secret-name) placeholders using Azure Key Vault.
    """

    # Load the raw config with references
    with open(config_path, "r") as f:
        config_data = json.load(f)

    # Initialize Key Vault client
    credential = DefaultAzureCredential()
    secret_client = SecretClient(vault_url=keyvault_url, credential=credential)

    # Recursive resolver
    def resolve(item):
        if isinstance(item, dict):
            return {k: resolve(v) for k, v in item.items()}
        elif isinstance(item, list):
            return [resolve(i) for i in item]
        elif isinstance(item, str) and item.startswith("@azureKeyVault("):
            secret_name = re.findall(r"@azureKeyVault\((.*?)\)", item)[0]
            return secret_client.get_secret(secret_name).value
        else:
            return item

    return resolve(config_data)

keyvault_url = "https://<your-keyvault-name>.vault.azure.net/"
config = load_config("config.json", keyvault_url)

# âœ… Now config has all secrets resolved from Key Vault
print(config["azure_openai"]["api_key"])


pip install azure-identity azure-keyvault-secrets

{
  "azure_openai": {
    "api_key": "@azureKeyVault(azure-openai-api-key)",
    "api_version": "2023-12-01-preview",
    "azure_endpoint": "@azureKeyVault(azure-openai-endpoint)",
    "deployment_name": "@azureKeyVault(azure-openai-deployment-name)"
  },
  "azure_storage": {
    "connection_string": "@azureKeyVault(azure-storage-connection-string)",
    "input_container": "input-pdfs",
    "output_container": "processed-results"
  }
}

