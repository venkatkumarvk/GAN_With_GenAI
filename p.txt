# For the View Results tab where PDF previews are shown:

st.subheader("PDF Previews")

if 'all_pdf_results' in st.session_state and st.session_state.all_pdf_results:
    # Get all the filenames for the dropdown
    pdf_filenames = [pdf_result["filename"] for pdf_result in st.session_state.all_pdf_results]
    
    # Create the dropdown to select which PDF to preview
    selected_pdf_to_preview = st.selectbox(
        "Select PDF to preview",
        pdf_filenames,
        key="preview_pdf_select"
    )
    
    # Add some debug info to help troubleshoot
    st.write("Input method:", st.session_state.get("input_method", "Not set"))
    
    # Check if blob storage credentials are available
    blob_client_available = False
    if azure_storage_connection_string:
        blob_service_client = get_blob_service_client()
        blob_client_available = blob_service_client is not None
        st.write("Blob client available:", blob_client_available)
    
    if st.button("Show PDF Preview"):
        with st.spinner(f"Loading preview for {selected_pdf_to_preview}..."):
            # Get the input method from session state
            input_method = st.session_state.get("input_method", "Upload Files")
            
            if input_method == "Upload Files":
                # Handle uploaded files preview
                # (your existing code for uploaded files)
                pass
            
            elif input_method == "Azure Blob Storage":
                # Handle blob storage preview
                if blob_client_available and 'blob_container' in st.session_state:
                    container_name = st.session_state.blob_container
                    st.write(f"Container: {container_name}")
                    
                    # Try to find the blob
                    # First, try with the filename directly
                    st.write(f"Attempting to access blob: {selected_pdf_to_preview}")
                    blob_content = None
                    
                    try:
                        # First attempt - direct filename
                        blob_content = download_blob_to_memory(blob_service_client, container_name, selected_pdf_to_preview)
                        
                        # If that fails and we have original_files, try those paths
                        if not blob_content and 'original_files' in st.session_state:
                            for blob_path in st.session_state.original_files:
                                if not isinstance(blob_path, str):
                                    continue
                                    
                                if blob_path.endswith(selected_pdf_to_preview):
                                    st.write(f"Trying with path: {blob_path}")
                                    blob_content = download_blob_to_memory(blob_service_client, container_name, blob_path)
                                    if blob_content:
                                        st.success(f"Found with path: {blob_path}")
                                        break
                        
                        # If still not found, try listing blobs
                        if not blob_content:
                            container_client = blob_service_client.get_container_client(container_name)
                            blobs = list(container_client.list_blobs())
                            st.write("Available blobs:")
                            
                            for blob in blobs[:10]:  # Show first 10
                                st.write(f"- {blob.name}")
                                if blob.name.endswith(selected_pdf_to_preview):
                                    st.write(f"Trying exact match: {blob.name}")
                                    blob_content = download_blob_to_memory(blob_service_client, container_name, blob.name)
                                    if blob_content:
                                        st.success(f"Found with exact match: {blob.name}")
                                        break
                                        
                        if blob_content:
                            # We have the content, convert and display
                            base64_pdf = convert_pdf_to_base64(blob_content)
                            st.write(f"### Preview of {selected_pdf_to_preview}")
                            display_pdf_viewer(base64_pdf)
                        else:
                            st.error(f"Could not find or download the blob {selected_pdf_to_preview}")
                            
                    except Exception as e:
                        st.error(f"Error during blob preview: {str(e)}")
                else:
                    st.error("Blob client or container name not available")
